{"title":"Node.js 实现简单的 Web 路由","uid":"621ca8e76bddb73a9eb22e1cc02afcf5","slug":"node.js路由","date":"2020-10-11T07:54:26.000Z","updated":"2022-01-18T17:12:20.841Z","comments":true,"path":"api/articles/node.js路由.json","keywords":null,"cover":[],"content":"<h2 id=\"Node-js-路由\"><a href=\"#Node-js-路由\" class=\"headerlink\" title=\"Node.js 路由\"></a>Node.js 路由</h2><p>路由: Web 服务器根据用户输入的不同 url 返回不同的页面。</p>\n<span id=\"more\"></span>\n\n<p>例如登录页面 login 和注册页面 register</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#默认端口都为80\nhttp:&#x2F;&#x2F;localhost:80&#x2F;login\nhttp:&#x2F;&#x2F;localhost:80&#x2F;register<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><ol>\n<li><p>建立所需要的文件, index.js 文件作为入口文件, router.js 实现路由响应, server.js 用来处理请求. file 文件夹下就建立几个不同的页面, 展示路由跳转.</p>\n<p> <img src=\"https://raw.githubusercontent.com/StarryEve/FigureBed/main/img/node-router-demo-files.png\"></p>\n</li>\n<li><p>创建一个 http 服务器，用于监听用户输入的 request 参数, 获取 request.url</p>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; server.js\nconst http &#x3D; require(&quot;http&quot;);\n\nhttp.createServer(onRequest).listen(&#39;8888&#39;);\n\nfunction onRequest(req, res) &#123; &#x2F;&#x2F; onRequest处理用户请求\n    console.log(req.url);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>解析 url，得到具体的请求页面，也就是路由入口</p>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; server.js\nconst url &#x3D; require(&quot;url&quot;);\n\nfunction onRequest(req, res) &#123;\n    console.log(req.url);\n\n    let myUrl &#x3D; url.parse(req.url);\n    console.log(myUrl);\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>根据 url 渲染不同页面</p>\n <pre class=\"line-numbers language-none\"><code class=\"language-none\">const http &#x3D; require(&quot;http&quot;);\nconst fs &#x3D; require(&quot;fs&quot;);\n\nlet Response &#x3D; function(res, filePath) &#123;\nfs.readFile(filePath, (err, data) &#x3D;&gt; &#123;\n    if(err) &#123;\n        res.writeHead(404, &#123;\n            &quot;Content-Type&quot;: &quot;text&#x2F;html&quot;\n        &#125;);\n        res.end(&quot;error&quot;)\n    &#125; else &#123;\n        res.writeHead(200, &#123;\n            &quot;Content-Type&quot;: &quot;text&#x2F;html&quot;\n        &#125;);\n        res.end(data);\n    &#125;\n&#125;)\n&#125;\n\n\nlet router &#x3D; function(req, res) &#123;\nif(req.url &#x3D;&#x3D; &#39;&#x2F;index&#39; || req.url &#x3D;&#x3D; &#39;&#x2F;&#39;) &#123; &#x2F;&#x2F;主页\n    index.index(res);\n&#125; else if(req.url &#x3D;&#x3D; &#39;&#x2F;poem&#39;) &#123; &#x2F;&#x2F; 古诗页面\n    Response(res, poem);\n&#125; else &#123;  &#x2F;&#x2F; 不存在的页面\n    Response(res, error);\n&#125;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><p>以上几步就能做一个简单的 node 路由 demo 了, 下面贴上完整的代码:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 入口文件\n&#x2F;&#x2F; index.js\nvar server &#x3D; require(&quot;.&#x2F;server&quot;);\n\nserver.start();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; router.js\n&#x2F;&#x2F; 需响应的文件路由\n\nconst http &#x3D; require(&quot;http&quot;);\n\n&#x2F;&#x2F; 导入文件系统模块\n&#x2F;&#x2F; 所有的文件系统操作都具有同步的、回调的、以及基于 promise 的形式。\nconst fs &#x3D; require(&quot;fs&quot;);\n\nconst index &#x3D; require(&quot;.&#x2F;file&#x2F;index&quot;); &#x2F;&#x2F; 主页路由模块\nconst error &#x3D; &quot;.&#x2F;file&#x2F;error404.html&quot;; &#x2F;&#x2F; 错误处理路由\nconst poem &#x3D; &quot;.&#x2F;file&#x2F;poem.html&quot;;       &#x2F;&#x2F; 古诗路由\n\nlet Response &#x3D; function(res, filePath) &#123;\n    fs.readFile(filePath, (err, data) &#x3D;&gt; &#123;\n        if(err) &#123;\n            res.writeHead(404, &#123;\n                &quot;Content-Type&quot;: &quot;text&#x2F;html&quot;\n            &#125;);\n            res.end(&quot;error&quot;)\n        &#125; else &#123;\n            res.writeHead(200, &#123;\n                &quot;Content-Type&quot;: &quot;text&#x2F;html&quot;\n            &#125;);\n            res.end(data);\n        &#125;\n    &#125;)\n&#125;\n\n\nlet router &#x3D; function(req, res) &#123;\n    if(req.url &#x3D;&#x3D; &#39;&#x2F;index&#39; || req.url &#x3D;&#x3D; &#39;&#x2F;&#39;) &#123; &#x2F;&#x2F;主页\n        index.index(res);\n    &#125; else if(req.url &#x3D;&#x3D; &#39;&#x2F;poem&#39;) &#123;\n        Response(res, poem);\n    &#125; else &#123;\n        Response(res, error);\n    &#125;\n&#125;\n\nexports.router &#x3D; router;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; server.js\n&#x2F;&#x2F; 服务端的start函数, 用于开启一个web服务器\n\n&#x2F;&#x2F; 导入http模块，使用HTTP服务器和客户端\n\n&#x2F;&#x2F; Node中的HTTP API是非常底层的，\n&#x2F;&#x2F; 仅进行流处理和消息解析。它将消息解析为消息头和消息体，但不会解析具体的消息头或消息体\nconst http &#x3D; require(&quot;http&quot;);\n\n&#x2F;&#x2F; 导入url模块，用于处理与解析 URL。\n\n&#x2F;&#x2F; URL字符串是结构化的字符串，包含多个含义不同的组成部分。解析后返回的是URL对象\n&#x2F;&#x2F; url 模块提供了两套 API 来处理 URL：一个是旧版本传统的 API，一个是实现了 WHATWG标准的新 API。\nconst url &#x3D; require(&quot;url&quot;);\n\nconst router &#x3D; require(&#39;.&#x2F;router&#39;)\n\n\nfunction start() &#123;\n    function onRequest(req, res) &#123;\n        if(req.url &#x3D;&#x3D;&#x3D; &#39;&#x2F;favicon.ico&#39;) &#123;\n            &#x2F;&#x2F; 浏览器默认会请求网站根目录的favicon.ico图标，如果网站根目录没有会产生 404。出于优化的考虑，要么就有这个图标，要么就禁止产生这个请求。\n            return ;\n        &#125;\n\n        console.log(&#39;End of line&#39;);\n        console.log(req.url);\n\n        let myUrl &#x3D; url.parse(req.url);\n        console.log(myUrl);\n\n        router.router(req, res)\n    &#125;\n\n    http.createServer(onRequest).listen(&#39;8888&#39;)\n    console.log(&quot;Server is running at &quot; + &quot;http:&#x2F;&#x2F;localhost:8888&quot;);\n&#125;\n\nexports.start &#x3D; start;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"Node.js 路由路由: Web 服务器根据用户输入的不同 url 返回不同的页面。 例如登录页面 login 和注册页面 register #默认端口都为80 http:&#x2F;&#x2F;localhost:80&#x2F;login http:&#x2F;&#x2F;...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"node","slug":"node","count":2,"path":"api/categories/node.json"}],"tags":[{"name":"node","slug":"node","count":2,"path":"api/tags/node.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Node-js-%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">Node.js 路由</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">实现思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">完整代码</span></a></li></ol>","author":{"name":"EVE","slug":"blog-author","avatar":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201171207395.png","link":"/","description":"keep calm, own minds </br>  put thoughts forward","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}},"mapped":true,"prev_post":{"title":"koa的基本使用","uid":"43e50756c3c9f1fa16f87b82a098213d","slug":"koa基本使用","date":"2021-07-03T12:54:26.000Z","updated":"2022-01-18T10:47:26.367Z","comments":true,"path":"api/articles/koa基本使用.json","keywords":null,"cover":[],"text":"koa demo学校期末实践要求做一个管理系统，刚好最近在看 node 后端的东西，就学习一下 koa，了解一下洋葱圈模型的思想和 MVC 架构的应用。 一. 安装 koa毕竟是后端服务，类型检测还是有必要上的，就顺便加上了 typescript。没有从零开始搭建，直接用别人搭建...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"node","slug":"node","count":2,"path":"api/categories/node.json"}],"tags":[{"name":"node","slug":"node","count":2,"path":"api/tags/node.json"},{"name":"koa","slug":"koa","count":1,"path":"api/tags/koa.json"}],"author":{"name":"EVE","slug":"blog-author","avatar":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201171207395.png","link":"/","description":"keep calm, own minds </br>  put thoughts forward","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}}},"next_post":{}}