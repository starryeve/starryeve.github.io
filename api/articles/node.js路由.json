{"title":"Node.js路由","uid":"2541adcd11744cf7342cd019a5003441","slug":"node.js路由","date":"2020-10-11T07:54:26.000Z","updated":"2022-01-12T10:47:04.247Z","comments":true,"path":"api/articles/node.js路由.json","keywords":null,"cover":[],"content":"<h3 id=\"Node-js-路由\"><a href=\"#Node-js-路由\" class=\"headerlink\" title=\"Node.js 路由\"></a>Node.js 路由</h3><p>路由: Web 服务器根据用户输入的不同 url 返回不同的页面。</p>\n<span id=\"more\"></span>\n\n<p>例如登录页面 login 和注册页面 register</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#默认端口都为80\nhttp:&#x2F;&#x2F;localhost:80&#x2F;login\nhttp:&#x2F;&#x2F;localhost:80&#x2F;register<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h4><h5 id=\"建立所需要的文件-index-js-文件作为入口文件-router-js-实现路由响应-server-js-用来处理请求-file-文件夹下就建立几个不同的页面-展示路由跳转\"><a href=\"#建立所需要的文件-index-js-文件作为入口文件-router-js-实现路由响应-server-js-用来处理请求-file-文件夹下就建立几个不同的页面-展示路由跳转\" class=\"headerlink\" title=\"建立所需要的文件, index.js 文件作为入口文件, router.js 实现路由响应, server.js 用来处理请求. file 文件夹下就建立几个不同的页面, 展示路由跳转.\"></a>建立所需要的文件, index.js 文件作为入口文件, router.js 实现路由响应, server.js 用来处理请求. file 文件夹下就建立几个不同的页面, 展示路由跳转.</h5><p><img src=\"https://raw.githubusercontent.com/StarryEve/FigureBed/main/img/node-router-demo-files.png\"></p>\n<h5 id=\"创建一个-http-服务器，用于监听用户输入的-request-参数-获取-request-url\"><a href=\"#创建一个-http-服务器，用于监听用户输入的-request-参数-获取-request-url\" class=\"headerlink\" title=\"创建一个 http 服务器，用于监听用户输入的 request 参数, 获取 request.url\"></a>创建一个 http 服务器，用于监听用户输入的 request 参数, 获取 request.url</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; server.js\nconst http &#x3D; require(&quot;http&quot;);\n\nhttp.createServer(onRequest).listen(&#39;8888&#39;);\n\nfunction onRequest(req, res) &#123; &#x2F;&#x2F; onRequest处理用户请求\n      console.log(req.url);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"解析-url，得到具体的请求页面，也就是路由入口\"><a href=\"#解析-url，得到具体的请求页面，也就是路由入口\" class=\"headerlink\" title=\"解析 url，得到具体的请求页面，也就是路由入口\"></a>解析 url，得到具体的请求页面，也就是路由入口</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; server.js\nconst url &#x3D; require(&quot;url&quot;);\n\nfunction onRequest(req, res) &#123;\n    console.log(req.url);\n\n    let myUrl &#x3D; url.parse(req.url);\n    console.log(myUrl);\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"根据-url-渲染不同页面\"><a href=\"#根据-url-渲染不同页面\" class=\"headerlink\" title=\"根据 url 渲染不同页面\"></a>根据 url 渲染不同页面</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">const http &#x3D; require(&quot;http&quot;);\nconst fs &#x3D; require(&quot;fs&quot;);\n\nlet Response &#x3D; function(res, filePath) &#123;\n  fs.readFile(filePath, (err, data) &#x3D;&gt; &#123;\n      if(err) &#123;\n          res.writeHead(404, &#123;\n              &quot;Content-Type&quot;: &quot;text&#x2F;html&quot;\n          &#125;);\n          res.end(&quot;error&quot;)\n      &#125; else &#123;\n          res.writeHead(200, &#123;\n              &quot;Content-Type&quot;: &quot;text&#x2F;html&quot;\n          &#125;);\n          res.end(data);\n      &#125;\n  &#125;)\n&#125;\n\n\nlet router &#x3D; function(req, res) &#123;\n  if(req.url &#x3D;&#x3D; &#39;&#x2F;index&#39; || req.url &#x3D;&#x3D; &#39;&#x2F;&#39;) &#123; &#x2F;&#x2F;主页\n      index.index(res);\n  &#125; else if(req.url &#x3D;&#x3D; &#39;&#x2F;poem&#39;) &#123; &#x2F;&#x2F; 古诗页面\n      Response(res, poem);\n  &#125; else &#123;  &#x2F;&#x2F; 不存在的页面\n      Response(res, error);\n  &#125;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"以上几步就能做一个简单的-node-路由-demo-了-下面贴上完整的代码\"><a href=\"#以上几步就能做一个简单的-node-路由-demo-了-下面贴上完整的代码\" class=\"headerlink\" title=\"以上几步就能做一个简单的 node 路由 demo 了, 下面贴上完整的代码:\"></a>以上几步就能做一个简单的 node 路由 demo 了, 下面贴上完整的代码:</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; 入口文件\n&#x2F;&#x2F; index.js\nvar server &#x3D; require(&quot;.&#x2F;server&quot;);\n\nserver.start();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; router.js\n&#x2F;&#x2F; 需响应的文件路由\n\nconst http &#x3D; require(&quot;http&quot;);\n\n&#x2F;&#x2F; 导入文件系统模块\n&#x2F;&#x2F; 所有的文件系统操作都具有同步的、回调的、以及基于 promise 的形式。\nconst fs &#x3D; require(&quot;fs&quot;);\n\nconst index &#x3D; require(&quot;.&#x2F;file&#x2F;index&quot;); &#x2F;&#x2F; 主页路由模块\nconst error &#x3D; &quot;.&#x2F;file&#x2F;error404.html&quot;; &#x2F;&#x2F; 错误处理路由\nconst poem &#x3D; &quot;.&#x2F;file&#x2F;poem.html&quot;;       &#x2F;&#x2F; 古诗路由\n\nlet Response &#x3D; function(res, filePath) &#123;\n    fs.readFile(filePath, (err, data) &#x3D;&gt; &#123;\n        if(err) &#123;\n            res.writeHead(404, &#123;\n                &quot;Content-Type&quot;: &quot;text&#x2F;html&quot;\n            &#125;);\n            res.end(&quot;error&quot;)\n        &#125; else &#123;\n            res.writeHead(200, &#123;\n                &quot;Content-Type&quot;: &quot;text&#x2F;html&quot;\n            &#125;);\n            res.end(data);\n        &#125;\n    &#125;)\n&#125;\n\n\nlet router &#x3D; function(req, res) &#123;\n    if(req.url &#x3D;&#x3D; &#39;&#x2F;index&#39; || req.url &#x3D;&#x3D; &#39;&#x2F;&#39;) &#123; &#x2F;&#x2F;主页\n        index.index(res);\n    &#125; else if(req.url &#x3D;&#x3D; &#39;&#x2F;poem&#39;) &#123;\n        Response(res, poem);\n    &#125; else &#123;\n        Response(res, error);\n    &#125;\n&#125;\n\nexports.router &#x3D; router;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; server.js\n&#x2F;&#x2F; 服务端的start函数, 用于开启一个web服务器\n\n&#x2F;&#x2F; 导入http模块，使用HTTP服务器和客户端\n\n&#x2F;&#x2F; Node中的HTTP API是非常底层的，\n&#x2F;&#x2F; 仅进行流处理和消息解析。它将消息解析为消息头和消息体，但不会解析具体的消息头或消息体\nconst http &#x3D; require(&quot;http&quot;);\n\n&#x2F;&#x2F; 导入url模块，用于处理与解析 URL。\n\n&#x2F;&#x2F; URL字符串是结构化的字符串，包含多个含义不同的组成部分。解析后返回的是URL对象\n&#x2F;&#x2F; url 模块提供了两套 API 来处理 URL：一个是旧版本传统的 API，一个是实现了 WHATWG标准的新 API。\nconst url &#x3D; require(&quot;url&quot;);\n\nconst router &#x3D; require(&#39;.&#x2F;router&#39;)\n\n\nfunction start() &#123;\n    function onRequest(req, res) &#123;\n        if(req.url &#x3D;&#x3D;&#x3D; &#39;&#x2F;favicon.ico&#39;) &#123;\n            &#x2F;&#x2F; 浏览器默认会请求网站根目录的favicon.ico图标，如果网站根目录没有会产生 404。出于优化的考虑，要么就有这个图标，要么就禁止产生这个请求。\n            return ;\n        &#125;\n\n        console.log(&#39;End of line&#39;);\n        console.log(req.url);\n\n        let myUrl &#x3D; url.parse(req.url);\n        console.log(myUrl);\n\n        router.router(req, res)\n    &#125;\n\n    http.createServer(onRequest).listen(&#39;8888&#39;)\n    console.log(&quot;Server is running at &quot; + &quot;http:&#x2F;&#x2F;localhost:8888&quot;);\n&#125;\n\nexports.start &#x3D; start;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"Node.js 路由路由: Web 服务器根据用户输入的不同 url 返回不同的页面。 例如登录页面 login 和注册页面 register #默认端口都为80 http:&#x2F;&#x2F;localhost:80&#x2F;login http:&#x2F;&#x2F;...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"node","slug":"node","count":2,"path":"api/categories/node.json"}],"tags":[{"name":"node","slug":"node","count":3,"path":"api/tags/node.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Node-js-%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">Node.js 路由</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">实现思路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E7%AB%8B%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E6%96%87%E4%BB%B6-index-js-%E6%96%87%E4%BB%B6%E4%BD%9C%E4%B8%BA%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6-router-js-%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E5%93%8D%E5%BA%94-server-js-%E7%94%A8%E6%9D%A5%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82-file-%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E5%B0%B1%E5%BB%BA%E7%AB%8B%E5%87%A0%E4%B8%AA%E4%B8%8D%E5%90%8C%E7%9A%84%E9%A1%B5%E9%9D%A2-%E5%B1%95%E7%A4%BA%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC\"><span class=\"toc-text\">建立所需要的文件, index.js 文件作为入口文件, router.js 实现路由响应, server.js 用来处理请求. file 文件夹下就建立几个不同的页面, 展示路由跳转.</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-http-%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E7%94%A8%E4%BA%8E%E7%9B%91%E5%90%AC%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%E7%9A%84-request-%E5%8F%82%E6%95%B0-%E8%8E%B7%E5%8F%96-request-url\"><span class=\"toc-text\">创建一个 http 服务器，用于监听用户输入的 request 参数, 获取 request.url</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%9E%90-url%EF%BC%8C%E5%BE%97%E5%88%B0%E5%85%B7%E4%BD%93%E7%9A%84%E8%AF%B7%E6%B1%82%E9%A1%B5%E9%9D%A2%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%B7%AF%E7%94%B1%E5%85%A5%E5%8F%A3\"><span class=\"toc-text\">解析 url，得到具体的请求页面，也就是路由入口</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%A0%B9%E6%8D%AE-url-%E6%B8%B2%E6%9F%93%E4%B8%8D%E5%90%8C%E9%A1%B5%E9%9D%A2\"><span class=\"toc-text\">根据 url 渲染不同页面</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A5%E4%B8%8A%E5%87%A0%E6%AD%A5%E5%B0%B1%E8%83%BD%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84-node-%E8%B7%AF%E7%94%B1-demo-%E4%BA%86-%E4%B8%8B%E9%9D%A2%E8%B4%B4%E4%B8%8A%E5%AE%8C%E6%95%B4%E7%9A%84%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">以上几步就能做一个简单的 node 路由 demo 了, 下面贴上完整的代码:</span></a></li></ol></li></ol>","author":{"name":"eve","slug":"blog-author","avatar":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201171207395.png","link":"/","description":"","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}},"mapped":true,"prev_post":{"title":"position：stick的使用","uid":"1e8e36cad758784f663faba95721ebb1","slug":"position：sticky的坑","date":"2020-11-23T07:54:26.000Z","updated":"2022-01-12T10:47:04.248Z","comments":true,"path":"api/articles/position：sticky的坑.json","keywords":null,"cover":null,"text":"看这篇文章吧：https://segmentfault.com/a/1190000007183209 ","link":"","photos":[],"count_time":{"symbolsCount":51,"symbolsTime":"1 mins."},"categories":[{"name":"css","slug":"css","count":1,"path":"api/categories/css.json"}],"tags":[{"name":"css","slug":"css","count":1,"path":"api/tags/css.json"},{"name":"web前端","slug":"web前端","count":1,"path":"api/tags/web前端.json"}],"author":{"name":"eve","slug":"blog-author","avatar":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201171207395.png","link":"/","description":"","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}}},"next_post":{}}