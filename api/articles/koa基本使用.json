{"title":"koa的基本使用","uid":"43e50756c3c9f1fa16f87b82a098213d","slug":"koa基本使用","date":"2021-07-03T12:54:26.000Z","updated":"2022-04-14T05:56:48.704Z","comments":true,"path":"api/articles/koa基本使用.json","keywords":null,"cover":[],"content":"<h1 id=\"koa-demo\"><a href=\"#koa-demo\" class=\"headerlink\" title=\"koa demo\"></a>koa demo</h1><p>学校期末实践要求做一个管理系统，刚好最近在看 node 后端的东西，就学习一下 koa，了解一下洋葱圈模型的思想和 MVC 架构的应用。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"一-安装-koa\"><a href=\"#一-安装-koa\" class=\"headerlink\" title=\"一. 安装 koa\"></a>一. 安装 koa</h2><p>毕竟是后端服务，类型检测还是有必要上的，就顺便加上了 typescript。没有从零开始搭建，直接用别人搭建好的简易脚手架了。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone -b start-point https://github.com/tuture-dev/koa-quickstart.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这里我使用了 <code>package-lock.json</code> 确保所有依赖版本一致，如果你用 <code>yarn</code> 安装依赖出现问题，建议删除 <code>node_modules</code> ，重新用 <code>npm install</code> 安装。</p></blockquote>\n<h2 id=\"二-搭建服务器\"><a href=\"#二-搭建服务器\" class=\"headerlink\" title=\"二. 搭建服务器\"></a>二. 搭建服务器</h2><ol>\n<li>初始化实例 app</li>\n<li>注册相关的中间件（跨域 cors 和请求体解析中间件 bodyParser）</li>\n<li>添加请求处理处理，响应用户请求</li>\n<li>运行服务器</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>express 中的请求处理函数：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>koa 中的：</p>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\">app.use((ctx) &#x3D;&gt; &#123;\n  ctx.body &#x3D; &quot;Hello Koa&quot;;\n&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></blockquote>\n<p>ctx（context）是上下文对象，</p>\n<h2 id=\"三-运行服务\"><a href=\"#三-运行服务\" class=\"headerlink\" title=\"三. 运行服务\"></a>三. 运行服务</h2><p>这里有个 ts 的报错：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">Warning</span><span class=\"token operator\">:</span> To load an <span class=\"token constant\">ES</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">set</span> <span class=\"token string\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span> <span class=\"token keyword\">in</span> the <span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>json or use the <span class=\"token punctuation\">.</span>mjs extension<span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个问题涉及 s 的模块化，顺便复习一下：</p>\n<ul>\n<li>AMD (Asynchronous Module Definition): 在浏览器中使用，并用 define 函数定义模块；</li>\n<li>CJS (CommonJS): 在 NodeJS 中使用，用 require 和 module.exports 引入和导出模块；</li>\n<li>ESM (ES Modules): JavaScript 从 ES6(ES2015) 开始支持的原生模块机制，使用 import 和 export 引入和导出模块；</li>\n</ul>\n<p>报错的原因：node 13.2.0 以前不支持 ES Module（当前环境下是 12.18.3）</p>\n<p>解决办法：</p>\n<ol>\n<li>升级 node, 直接上官网下载最新版本覆盖</li>\n<li>package.json 添加 ‘type’: ‘module’</li>\n</ol>\n<p>这里是用了 nodeman，所以不会有模块报错的问题</p>\n<h2 id=\"四-中间件\"><a href=\"#四-中间件\" class=\"headerlink\" title=\"四. 中间件\"></a>四. 中间件</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Expressive middleware for node.js using ES2017 async functions.（通过 ES2017 async 函数编写富有表达力的 Node.js 中间件）</p></blockquote>\n<p>koa 只是一个中间件框架，对标的是 express 底层的中间件层，而不包含诸如路由、模板引擎、发送文件等功能</p>\n<p><img src=\"https://pic4.zhimg.com/80/v2-161707d0d6ac313d47af2e729348034b_720w.jpg\" alt=\"img\"></p>\n<h3 id=\"1-洋葱圈模型\"><a href=\"#1-洋葱圈模型\" class=\"headerlink\" title=\"1. 洋葱圈模型\"></a>1. 洋葱圈模型</h3><p><img src=\"https://pic3.zhimg.com/80/v2-dfe81501697c485b80a24196589232f6_720w.jpg\" alt=\"img\"></p>\n<ul>\n<li>express 的中间件：</li>\n</ul>\n<p><img src=\"https://pic2.zhimg.com/80/v2-6c578c2d0c2a38f7cab11ba5f9b23d1d_720w.jpg\" alt=\"img\"></p>\n<p>请求（Request）直接<strong>依次贯穿</strong>各个中间件，最后通过请求处理函数返回响应（Response）</p>\n<p>koa 的中间件：</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-78e78ded464d6bbbc43c0dd1bfdd89d0_720w.jpg\" alt=\"img\"></p>\n<p>Koa 中间件不像 Express 中间件那样在请求通过了之后就完成了自己的使命；相反，中间件的执行清晰地分为<strong>两个阶段</strong></p>\n<h3 id=\"2-中间件的定义\"><a href=\"#2-中间件的定义\" class=\"headerlink\" title=\"2. 中间件的定义\"></a>2. 中间件的定义</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 第一阶段</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 第二阶段</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>ctx：就是 koa context, 贯穿上图所有中间件和请求处理函数的绿色箭头所传递的内容，里面封装了<strong>请求体和响应体</strong>（和其他属性），常用属性：<a href=\"https://link.zhihu.com/?target=https://github.com/koajs/koa/blob/master/docs/api/context.md\">Context API 文档</a>。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">ctx<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相当于 ctx.request.url</span>\nctx<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相当于 ctx.response.body</span>\nctx<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相当于 ctx.response.status</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>next：将控制权转交给下一个中间件，与 express 的 next 函数本质的不同是，返回一个 promise，在这个 Promise 进入完成状态（Fulfilled）后，就会去执行中间件中第二阶段的代码</p>\n</li>\n</ul>\n<h3 id=\"3-日志记录中间件\"><a href=\"#3-日志记录中间件\" class=\"headerlink\" title=\"3. 日志记录中间件\"></a>3. 日志记录中间件</h3><p>简单的一个<strong>logger</strong>，打印每次请求的方法，url，状态码和响应时间</p>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\">import &#123; Context &#125; from &quot;koa&quot;;\n\nexport function logger() &#123;\n  return async (ctx: Context, next: () &#x3D;&gt; Promise&lt;void&gt;) &#x3D;&gt; &#123;\n    const start &#x3D; Date.now();\n    await next();\n    const ms &#x3D; Date.now() - start;\n    console.log(&#96;$&#123;ctx.method&#125; $&#123;ctx.url&#125; $&#123;ctx.status&#125; - $&#123;ms&#125;ms&#96;);\n  &#125;;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此处的 logger 是一个<strong>中间件工厂函数（Factory）</strong>，调用这个工厂函数返回的结果才是真正的 koa 中间件。之所以写成一个工厂函数，是因为我们可以通过给工厂函数传参的方式来更好地控制中间件的行为</p>\n<p>在这个中间件的第一阶段，我们通过 <code>Date.now()</code> 先获取请求进入的时间，然后通过 <code>await next()</code> 让出执行权，等待下游中间件运行结束后，再在第二阶段通过计算 <code>Date.now()</code> 的差值来得出处理请求所用的时间</p>\n<h2 id=\"五-路由配置\"><a href=\"#五-路由配置\" class=\"headerlink\" title=\"五. 路由配置\"></a>五. 路由配置</h2><p>由于 koa 只是一个中间件框架，所以路由的配置需要独立的 npm 包，先安装 <code>@koa/router</code> 及其 ts 类型定义：：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> @koa/router\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> @types/koa__router -D<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>也可以使用<code>koa-router</code>，但<code>koa-router</code>目前处于几乎无人维护的状态，所以使用维护更积极的 Fork 版本 <code>@koa/router</code></p></blockquote>\n<h3 id=\"1-路由规划\"><a href=\"#1-路由规划\" class=\"headerlink\" title=\"1. 路由规划\"></a>1. 路由规划</h3><ul>\n<li><code>GET /users</code> ：查询所有的用户</li>\n<li><code>GET /users/:id</code> ：查询单个用户</li>\n<li><code>PUT /users/:id</code> ：更新单个用户</li>\n<li><code>DELETE /users/:id</code> ：删除单个用户</li>\n<li><code>POST /users/login</code> ：登录（获取 JWT Token）</li>\n<li><code>POST /users/register</code> ：注册用户</li>\n</ul>\n<h3 id=\"2-实现-Controller\"><a href=\"#2-实现-Controller\" class=\"headerlink\" title=\"2. 实现 Controller\"></a>2. 实现 Controller</h3><p>创建<strong>controllers</strong>目录，存放控制器相关的代码</p>\n<p><code>AuthController:</code></p>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\">&#x2F;&#x2F; src&#x2F;controllers&#x2F;auth.ts\nimport &#123; Context &#125; from &quot;koa&quot;;\n\nexport default class AuthController &#123;\n  public static async login(ctx: Context) &#123;\n    ctx.body &#x3D; &quot;Login controller&quot;;\n  &#125;\n\n  public static async register(ctx: Context) &#123;\n    ctx.body &#x3D; &quot;Register controller&quot;;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>`UserController``:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Context <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'koa'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token function\">listUsers</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">ctx</span><span class=\"token operator\">:</span> Context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'ListUsers controller'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token function\">showUserDetail</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">ctx</span><span class=\"token operator\">:</span> Context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ShowUserDetail controller with ID = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>ctx<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token function\">updateUser</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">ctx</span><span class=\"token operator\">:</span> Context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">UpdateUser controller with ID = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>ctx<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">&#125;</span>\nf\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token function\">deleteUser</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">ctx</span><span class=\"token operator\">:</span> Context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">DeleteUser controller with ID = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>ctx<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-实现路由\"><a href=\"#3-实现路由\" class=\"headerlink\" title=\"3. 实现路由\"></a>3. 实现路由</h3><p>创建 routers.ts，把控制器挂载到对应的路由上面：</p>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\">&#x2F;&#x2F; src&#x2F;routes.ts\nimport Router from &quot;@koa&#x2F;router&quot;;\n\nimport AuthController from &quot;.&#x2F;controllers&#x2F;auth&quot;;\nimport UserController from &quot;.&#x2F;controllers&#x2F;user&quot;;\n\nconst router &#x3D; new Router();\n\n&#x2F;&#x2F; auth 相关的路由\nrouter.post(&quot;&#x2F;auth&#x2F;login&quot;, AuthController.login);\nrouter.post(&quot;&#x2F;auth&#x2F;register&quot;, AuthController.register);\n\n&#x2F;&#x2F; users 相关的路由\nrouter.get(&quot;&#x2F;users&quot;, UserController.listUsers);\nrouter.get(&quot;&#x2F;users&#x2F;:id&quot;, UserController.showUserDetail);\nrouter.put(&quot;&#x2F;users&#x2F;:id&quot;, UserController.updateUser);\nrouter.delete(&quot;&#x2F;users&#x2F;:id&quot;, UserController.deleteUser);\n\nexport default router;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里导入<code>@koa/router</code> 报了个错：</p>\n<p><img src=\"C:/Users/coderzfh/AppData/Roaming/Typora/typora-user-images/image-20210625195621183.png\" alt=\"image-20210625195621183\"></p>\n<p>原因是 ts 文件引入第三方的模块缺少类型声明，解决方案有两种：</p>\n<ol>\n<li>自己编写类型声明文件</li>\n<li>安装官方提供的.d.ts</li>\n</ol>\n<h3 id=\"4-注册路由\"><a href=\"#4-注册路由\" class=\"headerlink\" title=\"4. 注册路由\"></a>4. 注册路由</h3><p>将 router 注册为中间件</p>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\">app.use(router.routes()).use(router.allowedMethods());<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这里我们调用 <code>router</code> 对象的 <code>routes</code> 方法获取到对应的 Koa 中间件，还调用了 <code>allowedMethods</code> 方法注册了 HTTP 方法检测的中间件，这样当用户通过不正确的 HTTP 方法访问 API 时，就会自动返回 405 Method Not Allowed 状态码</p>\n<h2 id=\"六-接入-MySql\"><a href=\"#六-接入-MySql\" class=\"headerlink\" title=\"六. 接入 MySql\"></a>六. 接入 MySql</h2><h3 id=\"1-运行数据库\"><a href=\"#1-运行数据库\" class=\"headerlink\" title=\"1. 运行数据库\"></a>1. 运行数据库</h3><p>安装、运行 MySql，通过命令行连接数据库：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">mysql -u root -p<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输入预先设置好的根账户密码，进入 MySql 的交互式执行客户端，运行以下命令：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">--- 创建数据库</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">DATABASE</span> koa<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">--- 创建用户并授予权限</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'user'</span><span class=\"token variable\">@'localhost'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'pass'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> koa<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'user'</span><span class=\"token variable\">@'localhost'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">--- 处理 MySQL 8.0 版本的认证协议问题</span>\n<span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'user'</span><span class=\"token variable\">@'localhost'</span> IDENTIFIED <span class=\"token keyword\">WITH</span> mysql_native_password <span class=\"token keyword\">BY</span> <span class=\"token string\">'pass'</span><span class=\"token punctuation\">;</span>\nflush <span class=\"token keyword\">privileges</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-TypeORM-的配置和连接\"><a href=\"#2-TypeORM-的配置和连接\" class=\"headerlink\" title=\"2. TypeORM 的配置和连接\"></a>2. TypeORM 的配置和连接</h3><p>安装相关的 npm 包，分别是 MySql 驱动，TypeORM 以及 reflect-metadata（反射 api 库，用于 TypeORM 推断模型的元数据）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> mysql typeorm reflect-metadata<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后在项目根目录下创建<code>ormconfig.json</code>，TypeORM 会读取这个数据库配置进行连接：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// ormconfig.json</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mysql\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"host\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"port\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3306</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"username\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"password\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pass\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"database\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"koa\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"synchronize\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 设为true能够让每次修改模型定义后能自动同步到数据库（就是其他ORM的自动数据迁移）</span>\n  <span class=\"token property\">\"entities\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/entity/*.ts\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 定义了模型文件的路径，下文创建</span>\n  <span class=\"token property\">\"cli\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"entitiesDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src/entity\"</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-连接数据库\"><a href=\"#3-连接数据库\" class=\"headerlink\" title=\"3. 连接数据库\"></a>3. 连接数据库</h3><p>修改 src/server.ts：</p>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\">&#x2F;&#x2F; src&#x2F;server.ts\nimport Koa from &quot;koa&quot;;\nimport cors from &quot;@koa&#x2F;cors&quot;;\nimport bodyParser from &quot;koa-bodyparser&quot;;\nimport &#123; createConnection &#125; from &quot;typeorm&quot;;\nimport &quot;reflect-metadata&quot;;\n\nimport router from &quot;.&#x2F;routes&quot;;\nimport &#123; logger &#125; from &quot;.&#x2F;logger&quot;;\n\ncreateConnection()\n  .then(() &#x3D;&gt; &#123;\n    &#x2F;&#x2F; 初始化 Koa 应用实例\n    const app &#x3D; new Koa();\n\n    &#x2F;&#x2F; 注册中间件\n    app.use(logger());\n    app.use(cors());\n    app.use(bodyParser());\n\n    &#x2F;&#x2F; 响应用户请求\n    app.use(router.routes()).use(router.allowedMethods());\n\n    &#x2F;&#x2F; 运行服务器\n    app.listen(3000);\n  &#125;)\n  .catch((err: string) &#x3D;&gt; console.log(&quot;TypeORM connection error:&quot;, err));<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-创建数据模型定义\"><a href=\"#4-创建数据模型定义\" class=\"headerlink\" title=\"4. 创建数据模型定义\"></a>4. 创建数据模型定义</h3><p>在<code>src</code>下创建<code>entity</code>目录，用于存放数据模型定义文件，创建 user.ts，代表用户模型：</p>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\">&#x2F;&#x2F; src&#x2F;entity&#x2F;user.ts\nimport &#123; Entity, Column, PrimaryGeneratedColumn &#125; from &quot;typeorm&quot;;\n\n@Entity()\nexport class User &#123;\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column(&#123; select: false &#125;)\n  password: string;\n\n  @Column()\n  email: string;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>typeorm</code>使用装饰器将<code>user</code>类映射到数据库中的表：</p>\n<ul>\n<li>Entity：用于装饰整个类，使其变成一个数据库模型</li>\n<li>Column：装饰类的某个属性，使其对应于数据库表中的一列，可提供一系列选项参数，如<code>select: false</code>，表示该字段在查询时默认不被选中</li>\n<li>PrimaryGenerateColumn：装饰主列，值自动生成</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>typeorm 的装饰器定义和使用：<a href=\"https://link.zhihu.com/?target=https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/decorator-reference.md\">装饰器文档</a></p></blockquote>\n<p>完成以上配置，就可以在 Controller 中进行数据的增删改查了。</p>\n<h3 id=\"5-实现-Controller-的逻辑：\"><a href=\"#5-实现-Controller-的逻辑：\" class=\"headerlink\" title=\"5. 实现 Controller 的逻辑：\"></a>5. 实现 Controller 的逻辑：</h3><h4 id=\"5-1-实现-UserController：\"><a href=\"#5-1-实现-UserController：\" class=\"headerlink\" title=\"5.1 实现 UserController：\"></a>5.1 实现 UserController：</h4><pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\">&#x2F;&#x2F; src&#x2F;controllers&#x2F;user.ts\nimport &#123; Context &#125; from &quot;koa&quot;;\nimport &#123; getManager &#125; from &quot;typeorm&quot;;\n\nimport &#123; User &#125; from &quot;..&#x2F;entity&#x2F;user&quot;;\n\nexport default class UserController &#123;\n  public static async listUsers(ctx: Context) &#123;\n    const userRepository &#x3D; getManager().getRepository(User);\n    const users &#x3D; await userRepository.find();\n\n    ctx.status &#x3D; 200;\n    ctx.body &#x3D; users;\n  &#125;\n\n  public static async showUserDetail(ctx: Context) &#123;\n    const userRepository &#x3D; getManager().getRepository(User);\n    const user &#x3D; await userRepository.findOne(+ctx.params.id);\n\n    if (user) &#123;\n      ctx.status &#x3D; 200;\n      ctx.body &#x3D; user;\n    &#125; else &#123;\n      ctx.status &#x3D; 404;\n    &#125;\n  &#125;\n\n  public static async updateUser(ctx: Context) &#123;\n    const userRepository &#x3D; getManager().getRepository(User);\n    await userRepository.update(+ctx.params.id, ctx.request.body);\n    const updatedUser &#x3D; await userRepository.findOne(+ctx.params.id);\n\n    if (updatedUser) &#123;\n      ctx.status &#x3D; 200;\n      ctx.body &#x3D; updatedUser;\n    &#125; else &#123;\n      ctx.status &#x3D; 404;\n    &#125;\n  &#125;\n\n  public static async deleteUser(ctx: Context) &#123;\n    const userRepository &#x3D; getManager().getRepository(User);\n    await userRepository.delete(+ctx.params.id);\n\n    ctx.status &#x3D; 204;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>TypeORM 中操作数据模型主要是通过<code>Repository</code>实现的，通过<code>getManager().getReposity(Model)</code>获取到</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>关于 Repository 的查询 API，参考<a href=\"https://link.zhihu.com/?target=https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/repository-api.md\">reposity-api</a>。</p></blockquote>\n<h4 id=\"5-2-实现-AuthCotroller：\"><a href=\"#5-2-实现-AuthCotroller：\" class=\"headerlink\" title=\"5.2 实现 AuthCotroller：\"></a>5.2 实现 AuthCotroller：</h4><p>安装 npm 加密算法包：这里采用 Argon2：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> argon2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>实现具体的 AuthCotroller 的逻辑：</p>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\">export default class AuthController &#123;\n  public static async login(ctx: Context) &#123;\n    ctx.body &#x3D; &quot;Login controller&quot;;\n  &#125;\n\n  public static async register(ctx: Context) &#123;\n    console.log(ctx.request.body);\n\n    const userRepository &#x3D; getManager().getRepository(User);\n\n    const newUser &#x3D; new User();\n\n    const &#123;\n      request: &#123;\n        body: &#123; name, email, password &#125;,\n      &#125;,\n    &#125; &#x3D; ctx;\n    newUser.name &#x3D; name;\n    newUser.email &#x3D; email;\n    newUser.password &#x3D; password;\n\n    const user &#x3D; await userRepository.save(newUser);\n\n    ctx.status &#x3D; 201;\n    ctx.body &#x3D; user;\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"七-实现-JWT-鉴权\"><a href=\"#七-实现-JWT-鉴权\" class=\"headerlink\" title=\"七. 实现 JWT 鉴权:\"></a>七. 实现 JWT 鉴权:</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>JSON Web Token 是一种流行的 RESTFUL API 鉴权方案，其原理（<a href=\"https://link.zhihu.com/?target=http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html\">可参考</a>）</p></blockquote>\n<p>安装相关的 npm 包：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> koa-jwt jsonwebtoken\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> @types/jsonwebtoken -D<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>创建 src/constants.ts，用于存放 JWT Secret 常量：</p>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\">&#x2F;&#x2F; src&#x2F;constants.ts\nexport const JWT_SECRET &#x3D; &quot;secret&quot;; &#x2F;&#x2F; 实际开发中，用替换成一个足够复杂的字符串，并且最好通过环境变量的方式注入<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-重新规划路由\"><a href=\"#1-重新规划路由\" class=\"headerlink\" title=\"1.重新规划路由\"></a>1.重新规划路由</h3><p><img src=\"https://pic1.zhimg.com/80/v2-ab5c81f4dba72b130e4224bcc0bd19a0_720w.jpg\" alt=\"img\"></p>\n<p>所有请求都可以直接访问未受保护的路由，但是受保护的路由就放在 JWT 中间件的后面（或者从洋葱模型的角度看是“里面”），这样对于没有携带 JWT Token 的请求就直接返回，而不会继续传递下去</p>\n<p>打开<code>src/routers.ts</code>路由文件，做如下修改：</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> Router <span class=\"token keyword\">from</span> <span class=\"token string\">\"@koa/router\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> AuthController <span class=\"token keyword\">from</span> <span class=\"token string\">\"./controllers/auth\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> UserController <span class=\"token keyword\">from</span> <span class=\"token string\">\"./controllers/user\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> unprotectedRouter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> protectedRouter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// auth相关路由</span>\nunprotectedRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/auth/login\"</span><span class=\"token punctuation\">,</span> AuthController<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nunprotectedRouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/auth/register\"</span><span class=\"token punctuation\">,</span> AuthController<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// user相关路由</span>\nprotectedRouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span> UserController<span class=\"token punctuation\">.</span>listUsers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nprotectedRouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/:id\"</span><span class=\"token punctuation\">,</span> UserController<span class=\"token punctuation\">.</span>showUserDetail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nprotectedRouter<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"users/:id\"</span><span class=\"token punctuation\">,</span> UserController<span class=\"token punctuation\">.</span>updateUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nprotectedRouter<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users:id\"</span><span class=\"token punctuation\">,</span> UserController<span class=\"token punctuation\">.</span>deleteUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span> protectedRouter<span class=\"token punctuation\">,</span> unprotectedRouter <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-注册-JWT-中间件\"><a href=\"#2-注册-JWT-中间件\" class=\"headerlink\" title=\"2.注册 JWT 中间件\"></a>2.注册 JWT 中间件</h3><p>注册 JWT 中间件，并在其前后注册不需要保护的路由<code>unprotectedRouter</code>和需要保护的路由<code>protectedRouter</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在 JWT 中间件注册完毕后，如果用户请求携带了有效的 Token，后面的 protectedRouter 就可以通过 ctx.state.user 获取到 Token 的内容（更精确的说法是 Payload，负载，一般是用户的关键信息，例如 ID）了；反之，如果 Token 缺失或无效，那么 JWT 中间件会直接自动返回 401 错误。关于 koa-jwt 的更多使用细节，请参考其<a href=\"https://link.zhihu.com/?target=https://github.com/koajs/jwt\">文档</a>。</p></blockquote>\n<p>3.在 Login 中签发 JWT Token</p>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token comment\">// src/controllers/auth.ts</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">import</span> jwt <span class=\"token keyword\">from</span> <span class=\"token string\">\"jsonwebtoken\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">JWT_SECRET</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../constants\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthController</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> userRepository <span class=\"token operator\">=</span> <span class=\"token function\">getManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRepository</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userRepository\n      <span class=\"token punctuation\">.</span><span class=\"token function\">createQueryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">addSelect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User.password\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      ctx<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">401</span><span class=\"token punctuation\">;</span>\n      ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> message<span class=\"token operator\">:</span> <span class=\"token string\">\"用户名不存在\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> argon2<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      ctx<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n      ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> token<span class=\"token operator\">:</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JWT_SECRET</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      ctx<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">401</span><span class=\"token punctuation\">;</span>\n      ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> message<span class=\"token operator\">:</span> <span class=\"token string\">\"密码错误\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在 <code>login</code> 中，我们首先根据用户名（请求体中的 <code>name</code> 字段）查询对应的用户，如果该用户不存在，则直接返回 401；存在的话再通过 <code>argon2.verify</code> 来验证请求体中的明文密码 <code>password</code> 是否和数据库中存储的加密密码是否一致，如果一致则通过 <code>jwt.sign</code> 签发 Token，如果不一致则还是返回 401。</p>\n<p>这里的 Token 负载就是标识用户 ID 的对象 <code>&#123; id: user.id &#125;</code> ，这样后面鉴权成功后就可以通过 <code>ctx.user.id</code> 来获取用户 ID。</p>\n<p>这里还遇到了一个小 bug：</p>\n<p>登录接口使用 post 传参，参数、路由均无出错，返回的却都是 404，响应体也为空</p>\n<p>这是原因 controller 中使用到了异步的访问数据库 api，但是方法调用忘记加<code>await</code>，而 koa 的 ctx 在没有任何改动的情况下，默认返回 status 就是 404，body 也为空</p>\n<p>总结一下可能出现 404 的原因:</p>\n<ul>\n<li>如果浏览器请求宝 404，可能是接口 url 没写对，或者 post 参数名出错（即找不到后端对应的 controller 方法）</li>\n<li>如果浏览器没有报错，而 response 返回 404，且后端 api 逻辑正常，可能是没有操作 koa 的 ctx，修改 body 和 status</li>\n<li>async 方法已经修改了 ctx，但调用时没有加 await</li>\n</ul>\n<h3 id=\"3-在-User-控制器中添加访问控制\"><a href=\"#3-在-User-控制器中添加访问控制\" class=\"headerlink\" title=\"3.在 User 控制器中添加访问控制\"></a>3.在 User 控制器中添加访问控制</h3><p>Token 的中间件和签发都搞定之后，最后一步就是在合适的地方校验用户的 Token，确认其是否有足够的权限。最典型的场景便是，在更新或删除用户时，我们要<strong>确保是用户本人在操作</strong>。打开 <code>src/controllers/user.ts</code> ，代码如下：</p>\n<pre class=\"line-numbers language-ts\" data-language=\"ts\"><code class=\"language-ts\"><span class=\"token comment\">// src/controllers/user.ts</span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> userId <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>ctx<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userId <span class=\"token operator\">!==</span> <span class=\"token operator\">+</span>ctx<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      ctx<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">403</span><span class=\"token punctuation\">;</span>\n      ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> message<span class=\"token operator\">:</span> <span class=\"token string\">\"无权进行此操作\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">const</span> userRepository <span class=\"token operator\">=</span> <span class=\"token function\">getManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRepository</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> updatedUser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token function\">deleteUser</span><span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> userId <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>ctx<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userId <span class=\"token operator\">!==</span> <span class=\"token operator\">+</span>ctx<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      ctx<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">403</span><span class=\"token punctuation\">;</span>\n      ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> message<span class=\"token operator\">:</span> <span class=\"token string\">\"无权进行此操作\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">const</span> userRepository <span class=\"token operator\">=</span> <span class=\"token function\">getManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRepository</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    ctx<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">204</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>两个 Controller 的鉴权逻辑基本相同，我们通过比较 <code>ctx.params.id</code> 和 <code>ctx.state.user.id</code> 是否相同，如果不相同则返回 403 Forbidden 错误，相同则继续执行相应的数据库操作。</p>\n","text":"koa demo学校期末实践要求做一个管理系统，刚好最近在看 node 后端的东西，就学习一下 koa，了解一下洋葱圈模型的思想和 MVC 架构的应用。 一. 安装 koa毕竟是后端服务，类型检测还是有必要上的，就顺便加上了 typescript。没有从零开始搭建，直接用别人搭建...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#koa-demo\"><span class=\"toc-text\">koa demo</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80-%E5%AE%89%E8%A3%85-koa\"><span class=\"toc-text\">一. 安装 koa</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C-%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">二. 搭建服务器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89-%E8%BF%90%E8%A1%8C%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">三. 运行服务</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B-%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">四. 中间件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%B4%8B%E8%91%B1%E5%9C%88%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">1. 洋葱圈模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">2. 中间件的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">3. 日志记录中间件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%94-%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">五. 路由配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%92\"><span class=\"toc-text\">1. 路由规划</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%AE%9E%E7%8E%B0-Controller\"><span class=\"toc-text\">2. 实现 Controller</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">3. 实现路由</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%B3%A8%E5%86%8C%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">4. 注册路由</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AD-%E6%8E%A5%E5%85%A5-MySql\"><span class=\"toc-text\">六. 接入 MySql</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%BF%90%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">1. 运行数据库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-TypeORM-%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">2. TypeORM 的配置和连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">3. 连接数据库</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">4. 创建数据模型定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E5%AE%9E%E7%8E%B0-Controller-%E7%9A%84%E9%80%BB%E8%BE%91%EF%BC%9A\"><span class=\"toc-text\">5. 实现 Controller 的逻辑：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-1-%E5%AE%9E%E7%8E%B0-UserController%EF%BC%9A\"><span class=\"toc-text\">5.1 实现 UserController：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-%E5%AE%9E%E7%8E%B0-AuthCotroller%EF%BC%9A\"><span class=\"toc-text\">5.2 实现 AuthCotroller：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%83-%E5%AE%9E%E7%8E%B0-JWT-%E9%89%B4%E6%9D%83\"><span class=\"toc-text\">七. 实现 JWT 鉴权:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%87%8D%E6%96%B0%E8%A7%84%E5%88%92%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">1.重新规划路由</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%B3%A8%E5%86%8C-JWT-%E4%B8%AD%E9%97%B4%E4%BB%B6\"><span class=\"toc-text\">2.注册 JWT 中间件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%9C%A8-User-%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">3.在 User 控制器中添加访问控制</span></a></li></ol></li></ol></li></ol>","author":{"name":"EVE","slug":"blog-author","avatar":"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202201171207395.png","link":"/","description":"keep calm, own minds </br>  put thoughts forward","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}},"mapped":true,"prev_post":{"title":"webpack5搭建vue3环境","uid":"4671e4a4ddc838dd69dd6aa254700d36","slug":"webpack5搭建vue3环境","date":"2021-08-07T08:52:54.000Z","updated":"2022-04-14T05:57:35.126Z","comments":true,"path":"api/articles/webpack5搭建vue3环境.json","keywords":null,"cover":"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202201190114249.jpg","text":"使用webpack5搭建vue3环境前言平时项目开发，从稳定性和易用性的角度，一般很少从头到尾搭建环境，大多数是采用以下的方法： 用官方脚手架vue-cli快速搭建项目 在别人搭建好的项目基础上开发 虽然能快速上手，但不利用项目把控能力的培养。无论是从面试的角度还是从问题排查的角...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[],"tags":[],"author":{"name":"EVE","slug":"blog-author","avatar":"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202201171207395.png","link":"/","description":"keep calm, own minds </br>  put thoughts forward","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}}},"next_post":{}}