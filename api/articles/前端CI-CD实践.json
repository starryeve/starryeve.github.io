{"title":"前端CI/CD实践","uid":"1ed68a3a19e8d33a6986f3ce51f04bc8","slug":"前端CI-CD实践","date":"2022-01-20T17:11:50.000Z","updated":"2022-01-22T16:28:36.271Z","comments":true,"path":"api/articles/前端CI-CD实践.json","keywords":null,"cover":[],"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h3><ul>\n<li>linux</li>\n<li>docker</li>\n<li>nginx</li>\n</ul>\n<h3 id=\"可以干嘛\"><a href=\"#可以干嘛\" class=\"headerlink\" title=\"可以干嘛\"></a>可以干嘛</h3><p>可以解放双手</p>\n<h2 id=\"CI-CD是什么\"><a href=\"#CI-CD是什么\" class=\"headerlink\" title=\"CI/CD是什么\"></a>CI/CD是什么</h2><p><strong>CI/CD</strong>（Continuous Intergration/Continuous Delpoy），<strong>持续集成/持续部署</strong>，或者<strong>持续集成/持续交付</strong>（Continuous Delivery），是一种在<strong>开发阶段</strong>引入<strong>自动化</strong>来频繁交付应用的方法。从前端的角度看，CICD的流程中涉及：</p>\n<ul>\n<li>CI：代码<strong>push</strong>到托管平台之后的<strong>lint测试</strong>、<strong>单元测试</strong></li>\n<li>CD：将<strong>build</strong>后的项目丢到远端 <strong>Nginx</strong> 的静态资源目录下</li>\n</ul>\n<!--因为我目前的项目都是在本地配好lint规则，做好相关的校验；测试相关的技术暂时还没有过多了解，所以这篇文章暂时不会提到CI的部分，而只是主要介绍下自动化部署的流程。-->\n\n<h3 id=\"构建-部署\"><a href=\"#构建-部署\" class=\"headerlink\" title=\"构建/部署\"></a>构建/部署</h3><p>前后端分离的开发模式中，前端项目经常会使用框架进行开发，经由 <strong>Webpack</strong>（或者其他构建工具） 打包后的SPA应用（代码），本质上都是静态资源，只需要把它们都放到 <strong>Nginx</strong>的静态资源目录下，配好相关的路径，即可完成部署。</p>\n<p>前端项目的构建、部署、上线流程，从 <strong>简陋疏散</strong> 到 <strong>完善严谨</strong> ，大致经历了以下几个阶段：</p>\n<h4 id=\"手动挡\"><a href=\"#手动挡\" class=\"headerlink\" title=\"手动挡\"></a>手动挡</h4><p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201230027136.png\" alt=\"image-20220123002744048\"></p>\n<ol>\n<li>本地执行 <code>yarn build</code>构建项目</li>\n<li>使用 <strong>transmit</strong>或其他支持 <strong>sftp</strong>的软件上传打包后的项目</li>\n<li>修改 Nginx 的 <strong>nginx.conf</strong> 文件，配置项目的访问路径</li>\n</ol>\n<p>手动部署操作起来很简单，但缺点也很明显，每次构建完都要人为地进行部署的动作，一方面减少了实际敲代码的时间，另一方面，人工操作免不了会有疏忽出错的时候。</p>\n<h4 id=\"自动挡\"><a href=\"#自动挡\" class=\"headerlink\" title=\"自动挡\"></a>自动挡</h4><p>随着<strong>工程化</strong>的发展和<strong>工具链</strong>的成熟，项目部署不再像以前简单粗暴。前端代码的<strong>健壮性</strong>、<strong>可靠性</strong>越来越被重视，项目发布前往往需要 <strong>代码约束</strong> 和 <strong>代码测试</strong> ，校验通过后服务器拉取最新的代码，进行 build 和 nginx 配置后才算完成整个部署的过程。</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201230027838.png\" alt=\"image-20220123002723754\"></p>\n<ol>\n<li>代码扫描 <code>yarn lint</code>检查代码是否规范</li>\n<li><code>yarn unit</code>进行单元测试</li>\n<li><code>git push</code>提交更改到远端仓库</li>\n<li>登录服务器，<code>git pull</code>拉取最新代码</li>\n<li><code>yarn build</code>构建项目</li>\n<li>配置 nginx 访问路径</li>\n</ol>\n<p>这个阶段，我们借助一些工具，能够减少代码不规范或隐藏bug的问题。但所有的操作还是得一行一行命令去敲，项目真正的部署也还是需要手动去操作服务器。 </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>其实完全可以将上面的操作细节都集成到一个 shell 脚本里，通知执行 shell 也能减少很多重复的工作。</p></blockquote>\n<h4 id=\"CI-CD\"><a href=\"#CI-CD\" class=\"headerlink\" title=\"CI/CD\"></a>CI/CD</h4><p>上面提到，借助<strong>shell</strong>也能使得一部分操作自动化，但无论是代码扫描、单元测试还是项目的构建，都还是在本地的开发机上进行（或者说跟开发强耦合），有没有办法将这些附属的操作抽离出来，放到另外的专有环境下进行呢？</p>\n<p>现在很流行的 <strong>DevOps</strong> 理念中，<strong>CI/CD</strong>的那一环就能很好地实现。</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201221716950.jpg\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>DevOps是一种思想理念，强调软件开发测试运维的一体化，目标是减少各个部门之间的沟通成本，从而实现软件的快速高质量的发布。CI/CD是一套实践方案，实现软件的构建测试部署的自动化。</p></blockquote>\n<h2 id=\"CI-CD实践-——-前端项目自动化部署\"><a href=\"#CI-CD实践-——-前端项目自动化部署\" class=\"headerlink\" title=\"CI/CD实践 —— 前端项目自动化部署\"></a>CI/CD实践 —— 前端项目自动化部署</h2><h3 id=\"流程架构\"><a href=\"#流程架构\" class=\"headerlink\" title=\"流程架构\"></a>流程架构</h3><h4 id=\"想要达到的效果\"><a href=\"#想要达到的效果\" class=\"headerlink\" title=\"想要达到的效果\"></a>想要达到的效果</h4><p>远程当主分支代码发生改变，拉取主分支代码进行构建，完成后通过 ssh 上传到测试/开发服务器。</p>\n<h4 id=\"实现的技术链路\"><a href=\"#实现的技术链路\" class=\"headerlink\" title=\"实现的技术链路\"></a>实现的技术链路</h4><p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201230027755.png\" alt=\"image-20220123002706664\"></p>\n<h3 id=\"搭建过程\"><a href=\"#搭建过程\" class=\"headerlink\" title=\"搭建过程\"></a>搭建过程</h3><h4 id=\"docker环境的搭建\"><a href=\"#docker环境的搭建\" class=\"headerlink\" title=\"docker环境的搭建\"></a>docker环境的搭建</h4><ol>\n<li><p>安装 docker </p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token comment\"># 安装 docker 的依赖库，-y 选项表示所有的 Is this OK[y/d/N]，都会自动选择y</span>\nyum <span class=\"token function\">install</span> -y yum-utils device-mapper-persistent-data lvm2 \n\n<span class=\"token comment\"># 添加 docker cd 软件源信息</span>\n<span class=\"token function\">sudo</span> yum-config-manager --add-repo <span class=\"token punctuation\">\\</span> https://download.docker.com/linux/centos/docker-ce.repo\n\n<span class=\"token comment\"># 安装 docker ce </span>\n<span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> docker-ce<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>启动 docker </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> <span class=\"token function\">docker</span> <span class=\"token comment\"># 设置开机自启</span>\n<span class=\"token function\">sudo</span> systemctl start <span class=\"token function\">docker</span> /<span class=\"token comment\">#  启动docker</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://docs.docker.com/engine/install/centos/\">docker contos 安装指南</a></p></blockquote>\n<h4 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h4><p>docker-compose 用于定义和运行多容器 docker 应用程序，使用 <strong>yml</strong> 文件配置应用所需的所有服务。</p>\n<ol>\n<li><p>安装 docker-compose</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">curl</span> -L <span class=\"token string\">\"https://github.com/docker/compose/releases/download/1.24.0/docker-compose-<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">uname</span> -s<span class=\"token variable\">)</span></span>-<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">uname</span> -m<span class=\"token variable\">)</span></span>\"</span> -o /usr/local/bin/docker-compose<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>提升权限</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> +x /usr/local/bin/docker-compos<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://docs.docker.com/compose/install/\">docker-compose 安装指南</a></p></blockquote>\n<h4 id=\"创建-docker-compose-应用\"><a href=\"#创建-docker-compose-应用\" class=\"headerlink\" title=\"创建 docker-compose 应用\"></a>创建 docker-compose 应用</h4><p>这里为了方便， nginx 通过容器的方式去启动（不会影响到我目前的 nginx ），jenkins 就还是放在跟项目部署的服务器上（方便后续直接通过 shell 复制构建好的项目）</p>\n<p>（拉取nginx镜像，编写目录数据卷映射）</p>\n<ol>\n<li><p>拉取 <strong>nginx</strong> 镜像</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token function\">docker</span> pull nginx\n\n<span class=\"token function\">docker</span> images <span class=\"token comment\"># 查看安装的镜像</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>创建数据卷目录，以便挂载到容器里</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">+ compose <span class=\"token comment\"># docker-compose 配置目录</span>\n\t- docker-compose.yml \n+ nginx  \t\t\n \t+ conf\t<span class=\"token comment\"># nginx 配置</span>\n \t\t- nginx.conf\n \t+ html\t<span class=\"token comment\"># nginx 静态资源</span>\n  \t- index.html<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>编写 <strong>docker-compose.yml</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">version: <span class=\"token string\">'3'</span>\nservices:                                            \n  cicd_nginx:\n    restart: always\n    image: nginx\n    container_name: nginx\n    ports:\n      - <span class=\"token number\">3300</span>:80\n      - <span class=\"token number\">3301</span>:433\n    volumes:\n      - <span class=\"token punctuation\">..</span>/nginx/html:/usr/share/nginx/html\n      - <span class=\"token punctuation\">..</span>/nginx/conf/nginx.conf:/etc/nginx/nginx.conf\n      - <span class=\"token punctuation\">..</span>/nginx/log:/var/log/nginx\n      - <span class=\"token punctuation\">..</span>/nginx/localtime:/etc/localtime:ro<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>启动</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker-compose</span> up -d\n<span class=\"token function\">docker-compose</span> stop //停止nginx和jenkins<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>公网查看 nginx</p>\n</li>\n</ol>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201221716370.png\" alt=\"image-20220122154400721\"></p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201221716863.png\" alt=\"image-20220122154557051\"></p>\n<h4 id=\"Jenkins基本配置\"><a href=\"#Jenkins基本配置\" class=\"headerlink\" title=\"Jenkins基本配置\"></a>Jenkins基本配置</h4><ol>\n<li> 前往 jenkins 容器挂载的数据卷中获得初始密码</li>\n</ol>\n   <pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> /home/cicd_demo/jenkins/jenkins_home/secrets/initialAdminPassword <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这个密码只会显示一次，之后如果忘记密码需要重置</p></blockquote>\n<ol start=\"2\">\n<li><p>输入密码进入页面之后，选择推荐安装</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201221716405.png\" alt=\"image-20220122155307819\"></p>\n<p>可以看到，jenkins 会自动帮我们安装很多插件，比如最常用的 <strong>git</strong></p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201221716702.png\" alt=\"image-20220122155629224\"></p>\n</li>\n<li><p>新建账户</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201221716229.png\" alt=\"image-20220122155900060\"></p>\n</li>\n<li><p>进入到主页后，先前往 <strong>Manage Jenkins - Manage Plugins</strong> 安装需要用到的插件，目前就只需要安装 <strong>NodeJS</strong></p>\n<p>![image-20220122172232223](/Users/starryeve/Library/Application Support/typora-user-images/image-20220122172232223.png)</p>\n</li>\n<li><p>前往全局工具配置，安装需要的不同版本的 <strong>node</strong> 环境</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201222220438.png\" alt=\"image-20220122222048344\"></p>\n</li>\n<li><p>配置 github</p>\n<p>在配置之前，我们先要到 <strong>GitHub</strong> 生成 <strong>Personal access token</strong>。</p>\n<p><strong>头像 - Settings - Developer settings - Personal access tokens - Generate new token</strong>，按下图勾选需要的权限</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201222229901.png\" alt=\"image-20220122222951817\"></p>\n<p>还记得我吗要实现的效果吗？当主分支有新的代码提交，就要通知 jenkins 去拉取代码并进行构建。既然是<strong>通知</strong>，那么肯定就需要用到 <strong>Webhook</strong>。这里并不需要手动创建 <strong>Webhock</strong>，jenkins提供的插件会帮我们创建。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Webhock</p></blockquote>\n<p>接下来继续配置插件，**Manage Jenkisn - Config System - **，找到 Github 配置的部分</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201222237512.png\" alt=\"image-20220122223754425\"></p>\n<p>点击添加凭证，选择 <strong>Jenkins</strong>，点击后会弹出一个添加凭据的窗口，<strong>Type</strong> 选择为 <strong>Secret text</strong>，将我们刚才生成的 <strong>Personal access token</strong> 复制到 <strong>Secret</strong> 一栏中，点击添加</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201222239856.png\" alt=\"image-20220122223948772\"></p>\n<p>添加后在 <strong>Credentials</strong> 一栏选中 <strong>Secret text</strong>，勾选 <strong>Manage Hook</strong>，点击 <strong>Test connection</strong>，如果正确显示了GitHub 用户名，就说明配置成功了。</p>\n</li>\n</ol>\n<p>经过上面几步后，就完成了两件事情，Node 环境的配置和 Github Webhock 的添加，下面就可以开始新建任务了。</p>\n<h3 id=\"新建一个Item\"><a href=\"#新建一个Item\" class=\"headerlink\" title=\"新建一个Item\"></a>新建一个Item</h3><ol>\n<li><p>回到首页，新建一个自由风格的任务</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201222255692.png\" alt=\"image-20220122225529611\"></p>\n</li>\n<li><p>勾选 <strong>GitHub project</strong>，输入项目地址。将下面的 <strong>Source Code Management</strong> 选中为 <strong>Git</strong>，将你要构建部署的项目的 <strong>clone</strong> 地址填到 <strong>Repository URL</strong> 一栏中。</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201222259848.png\" alt=\"image-20220122225920767\"></p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201222303638.png\" alt=\"image-20220122230320553\"></p>\n<p>如果是公开的仓库，<strong>Credentials</strong>可以选择无。这里我准备的是一个私有的仓库，还需要添加一个可以访问访问 Github账户 的凭证，添加方法类似上面配置 <strong>Github Webhock</strong> 。这里选择 <strong>ssh private key</strong>的方式</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201222312460.png\" alt=\"image-20220122231214377\"></p>\n</li>\n<li><p>设置构建触发器和构建环境</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201222318474.png\" alt=\"image-20220122231805390\"></p>\n</li>\n<li><p>编写构建shell</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201230023146.png\" alt=\"image-20220123000138842\"></p>\n</li>\n</ol>\n<p>经过上面的步骤，就算完成一个 <strong>Item</strong>了，当 <strong>Github</strong>主分支有新的代码提交，就会触发构建：</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201230023483.png\" alt=\"image-20220123002304395\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>还没有总结</p>\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4>","feature":true,"text":"前言前置知识 linux docker nginx 可以干嘛可以解放双手 CI/CD是什么CI/CD（Continuous Intergration/Continuous Delpoy），持续集成/持续部署，或者持续集成/持续交付（Continuous Delivery），是一种...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">前置知识</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E4%BB%A5%E5%B9%B2%E5%98%9B\"><span class=\"toc-text\">可以干嘛</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CI-CD%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">CI&#x2F;CD是什么</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA-%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">构建&#x2F;部署</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E6%8C%A1\"><span class=\"toc-text\">手动挡</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E6%8C%A1\"><span class=\"toc-text\">自动挡</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#CI-CD\"><span class=\"toc-text\">CI&#x2F;CD</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CI-CD%E5%AE%9E%E8%B7%B5-%E2%80%94%E2%80%94-%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">CI&#x2F;CD实践 —— 前端项目自动化部署</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">流程架构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%83%B3%E8%A6%81%E8%BE%BE%E5%88%B0%E7%9A%84%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">想要达到的效果</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%8A%80%E6%9C%AF%E9%93%BE%E8%B7%AF\"><span class=\"toc-text\">实现的技术链路</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">搭建过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#docker%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">docker环境的搭建</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85docker-compose\"><span class=\"toc-text\">安装docker-compose</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA-docker-compose-%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">创建 docker-compose 应用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Jenkins%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Jenkins基本配置</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAItem\"><span class=\"toc-text\">新建一个Item</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li></ol></li></ol></li></ol>","author":{"name":"EVE","slug":"blog-author","avatar":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201171207395.png","link":"/","description":"keep calm, own minds </br>  put thoughts forward","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"如何写好JavaScript代码","uid":"66d5432935a9e114e0c6473f5ec12a37","slug":"如何写好JavaScript代码","date":"2022-01-19T15:20:00.000Z","updated":"2022-01-19T15:22:56.620Z","comments":true,"path":"api/articles/如何写好JavaScript代码.json","keywords":null,"cover":[],"text":"写好JS的三个原则各司其职Web天然具有分层的体系架构，HTML、CSS、JavaScript各自承担着结构、表现和行为的责任，这种鲜明的三层结构就能在一定程度上指导我们设计一个高可用、高可扩展的应用。 网页换肤以一个具备 白天/夜间 模式切换的页面为例，我们先给出基本的HTML...","link":"","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[],"tags":[],"author":{"name":"EVE","slug":"blog-author","avatar":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201171207395.png","link":"/","description":"keep calm, own minds </br>  put thoughts forward","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}},"feature":true}}