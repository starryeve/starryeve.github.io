{"title":"JavaScript 中堆的实现","uid":"24ef29a6bf818a7a3e9faebfef05e8bd","slug":"JavaScript 中堆的实现","date":"2022-03-03T02:54:26.000Z","updated":"2022-04-14T05:57:12.845Z","comments":true,"path":"api/articles/JavaScript 中堆的实现.json","keywords":null,"cover":[],"content":"<h1 id=\"JavaScript-中堆的实现\"><a href=\"#JavaScript-中堆的实现\" class=\"headerlink\" title=\"JavaScript 中堆的实现\"></a>JavaScript 中堆的实现</h1><h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><p>满足以下两个性质的数据结构就是堆：</p>\n<ul>\n<li>堆是一个完全二叉树</li>\n<li>堆上的任意节点值都必须大于等于（大顶堆）或小于等于（小顶堆）其左右子节点值</li>\n</ul>\n<p>也就是说，堆的根节点是堆中最大或最小的元素：</p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204041032972.png\" alt=\"image-20220404103248937\"></p>\n<h2 id=\"堆的构建\"><a href=\"#堆的构建\" class=\"headerlink\" title=\"堆的构建\"></a>堆的构建</h2><p>堆本身是一棵完全二叉树，所以可以使用数组进行描述。<br>给定一个节点的下标 <strong>i</strong> （i 从 0 开始），那么该节点的父节点下标为 <strong>（i - 1) / 2</strong> ，左子节点下标为 <strong>2i + 1</strong>，右子节点下标为 <strong>2i + 2</strong>：</p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204041036461.png\" alt=\"image-20220404103622424\"></p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Heap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>item <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>下面是两种常用的堆构建方法：</p>\n<ul>\n<li>插入创建：每次插入一个节点，同时<strong>维护堆的性质</strong>，实现一个大顶堆（或小顶堆）</li>\n<li>原地创建：又称<strong>堆化</strong>，即给定一组节点，实现一个大顶堆（或小顶堆）</li>\n</ul>\n<h3 id=\"插入建堆\"><a href=\"#插入建堆\" class=\"headerlink\" title=\"插入建堆\"></a>插入建堆</h3><ol>\n<li>将节点插入到堆尾：我们使用数组描述堆，那么直接将新节点 push 到数组尾即可</li>\n<li>自下而上堆化：将插入节点<strong>与其父节点比较</strong>，如果值大于父节点（大顶堆）或小于父节点（小顶堆），则插入节点与父节点对换位置</li>\n<li>重复 2 ，直到不需要交换或交换到根节点，插入完成</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204041035330.png\" alt=\"image-20220404103557292\"></p>\n<p>代码实现：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token class-name\">Heap</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">insert</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">let</span> pI <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 父节点下标</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> pI <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>pI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">,</span> i <span class=\"token punctuation\">,</span> pI<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 交换</span>\n    i <span class=\"token operator\">=</span> pI\n    pI <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">items<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"原地建堆\"><a href=\"#原地建堆\" class=\"headerlink\" title=\"原地建堆\"></a>原地建堆</h3><p>给定一组序列：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>原地建堆的方法有两种：</p>\n<ul>\n<li>自下而上堆化：将节点与其父节点比较，如果节点大于父节点（大碓顶）或节点小于父节点（小顶堆），则节点与父节点提对换位置</li>\n<li>自上而下堆化：将节点与其左右节点比较，如果存在左右节点大于该节点（大顶堆）或小于该节点（小顶堆），则将子节点的最大值（大顶堆）或最小值（小顶堆）与其对换</li>\n</ul>\n<p>无论采用哪一种方式，都必须要遍历序列，区别在于，自上而下式是从前往后，而自下而上是、从后到前。</p>\n<h4 id=\"从前到后，自下而上堆化建堆\"><a href=\"#从前到后，自下而上堆化建堆\" class=\"headerlink\" title=\"从前到后，自下而上堆化建堆\"></a>从前到后，自下而上堆化建堆</h4><p>以小顶堆为例：</p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204041213721.png\" alt=\"image-20220404121352661\"></p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204041214528.png\" alt=\"image-20220404121424478\"></p>\n<p>代码实现：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildHeap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span>\n    cur<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> pI <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>pI <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>pI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>pI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>pI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    i <span class=\"token operator\">=</span> pI\n    pI <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"从后到前，自上而下堆化建堆\"><a href=\"#从后到前，自上而下堆化建堆\" class=\"headerlink\" title=\"从后到前，自上而下堆化建堆\"></a>从后到前，自上而下堆化建堆</h4><p>同样，以小顶堆为例</p>\n<p>注意：从后往前部并不是从序列的最后一个元素开始，而是从最后一个非叶子节点，因为叶子节点没有子节点，不需要自上而下式堆化。</p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204041402501.png\" alt=\"image-20220404140201429\"></p>\n<p>代码：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">buildHeap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span>  <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span>\n   cur<span class=\"token operator\">--</span>\n <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token keyword\">let</span> heapSize <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length\n <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">let</span> minI <span class=\"token operator\">=</span> i\n   <span class=\"token keyword\">let</span> lI <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> rI <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lI <span class=\"token operator\">&lt;</span> heapSize <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>lI<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> minI <span class=\"token operator\">=</span> lI\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rI <span class=\"token operator\">&lt;</span> heapSize <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>rI<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>minI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> minI <span class=\"token operator\">=</span> rI\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>minI <span class=\"token operator\">==</span> i<span class=\"token punctuation\">)</span>\t<span class=\"token keyword\">break</span>\n   <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>minI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>minI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n   i <span class=\"token operator\">=</span> minI\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>堆是一棵完全二叉树，可以使用数组存储。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>堆排序的基本思想是：将待排序序列构造成一个堆。此时，整个序列的<strong>最值</strong>就是堆顶的<strong>根节点</strong>，<strong>将其与末尾元素进行交换</strong>，此时末尾就为最值。然后<strong>将剩余 n - 1 个元素重新进行堆化</strong>，这样会得到 <strong>n 个元素的次值</strong>，最终形成一个有序序列。</p></blockquote>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><p>还是沿用上面的例子，假定初始序列如下，要求对其进行降序排列</p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204070827702.png\" alt=\"image-20220407082727638\"></p>\n<ol>\n<li><p>构造初始堆。将给定无序序列构造成一个小顶堆（<strong>降序采用小顶堆，升序采用大顶堆</strong>）</p>\n<p>这里就可以用上前文介绍的原地堆化算法，以自上而下堆化为例，将序列转化为一个小顶堆：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">heapSort</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">buildHeap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> validSize<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">buildHeap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 取最后一个非叶子节点下标</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 从后往前遍历堆化</span>\n    <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n    cur <span class=\"token operator\">--</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> validSize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 从上往下堆化</span>\n    <span class=\"token keyword\">let</span> minI <span class=\"token operator\">=</span> i\n    <span class=\"token keyword\">let</span> lI <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> rI <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lI <span class=\"token operator\">&lt;</span> validSize <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>lI<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> minI <span class=\"token operator\">=</span> lI\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rI <span class=\"token operator\">&lt;</span> validSize <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>rI<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>minI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\tminI <span class=\"token operator\">=</span> rI\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>minI <span class=\"token operator\">===</span> i<span class=\"token punctuation\">)</span>\t<span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>minI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>minI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    i <span class=\"token operator\">=</span> minI\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意到，与前面不同的一点是，这里的 <code>hepify</code> 方法多了一个 <code>validSize</code> 参数。这是因为我们后续排序过程中也会用到堆化，到那个时候需要<strong>剔除掉已经排好序的元素</strong>。</p>\n<p>经过上面的操作，就将一个无序序列构建成了一个小顶堆：</p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204070832493.png\" alt=\"image-20220407083253427\"></p>\n</li>\n<li><p><strong>将堆顶元素与有效序列末尾元素进行交换</strong>，即将当前 <strong>n 个元素的最小值</strong>放到序列末尾。</p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204070854202.png\" alt=\"image-20220407085443117\"></p>\n</li>\n<li><p>经过 2，我们得到了 <strong>n 个元素的最小值</strong>，接下来的任务是在 <strong>n - 1 个元素里求最小值</strong>。如下图圈住的地方：</p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204070901592.png\" alt=\"image-20220407090143511\"></p>\n<p>由于<strong>发生变动的只有根元素</strong>，所以只要从根元素开始，进行<strong>自上而下堆化</strong>，<strong>将其下沉到应该在的位置</strong>。整个 n - 1 序列就又会构成一个小顶堆</p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204070914147.png\" alt=\"image-20220407091456070\"></p>\n</li>\n<li><p>重复2、3，<strong>待排序的有效序列越来越小（即黄色圈中元素越来越少）</strong>，直到只剩下一个元素，排序完成。</p>\n</li>\n</ol>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">heapSort</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> validSize <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 初始时有效序列的长度为数组长度</span>\n  <span class=\"token function\">buildHeap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> validSize<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> validSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    validSize <span class=\"token operator\">--</span>\n    <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> validSize<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 因为只调整了根节点，下方的子树还是保持着堆的特性，所以只需要从根节点开始进行堆化</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">buildHeap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> validSize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> cur <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>validSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 取最后一个非叶子节点下标</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cur <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 从后往前遍历堆化</span>\n    <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> validSize<span class=\"token punctuation\">)</span>\n    cur <span class=\"token operator\">--</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> validSize</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 从上往下堆化</span>\n    <span class=\"token keyword\">let</span> minI <span class=\"token operator\">=</span> i\n    <span class=\"token keyword\">let</span> lI <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> rI <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lI <span class=\"token operator\">&lt;</span> validSize <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>lI<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> minI <span class=\"token operator\">=</span> lI\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rI <span class=\"token operator\">&lt;</span> validSize <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>rI<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>minI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\tminI <span class=\"token operator\">=</span> rI\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>minI <span class=\"token operator\">===</span> i<span class=\"token punctuation\">)</span>\t<span class=\"token keyword\">break</span>\n    <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>minI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>minI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    i <span class=\"token operator\">=</span> minI\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"复杂度\"><a href=\"#复杂度\" class=\"headerlink\" title=\"复杂度\"></a>复杂度</h3><p><strong>时间复杂度：</strong>初始建堆过程的时间复杂度是 <code>O(n)</code> ；排序需要从后往前缩小有效序列为 <code>O(n)</code>, 在交换节点之后，还要从根元素开始，进行堆化，<code>为O(logn)</code>，所以排序时间复杂度为 <code>O(nlogn)</code>。总体时间复杂度为 <code>O(n) + O(nlogn) = O(nlogn)</code></p>\n<p><strong>空间复杂度：</strong>由于是原地操作，只是用到了一些辅助变量，如 <code>validSize</code>来标识待排序序列， 故空间复杂度为<code>O(1)</code></p>\n<h2 id=\"堆的经典应用\"><a href=\"#堆的经典应用\" class=\"headerlink\" title=\"堆的经典应用\"></a>堆的经典应用</h2><h3 id=\"Top-K-问题\"><a href=\"#Top-K-问题\" class=\"headerlink\" title=\"Top K 问题\"></a>Top K 问题</h3><h3 id=\"中位数问题\"><a href=\"#中位数问题\" class=\"headerlink\" title=\"中位数问题\"></a>中位数问题</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://zhuanlan.zhihu.com/p/76734219\">https://zhuanlan.zhihu.com/p/76734219</a></p>\n<p><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/60\">https://github.com/sisterAn/JavaScript-Algorithms/issues/60</a></p></blockquote>\n","feature":true,"text":"JavaScript 中堆的实现堆满足以下两个性质的数据结构就是堆： 堆是一个完全二叉树 堆上的任意节点值都必须大于等于（大顶堆）或小于等于（小顶堆）其左右子节点值 也就是说，堆的根节点是堆中最大或最小的元素： 堆的构建堆本身是一棵完全二叉树，所以可以使用数组进行描述。给定一个节...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JavaScript-%E4%B8%AD%E5%A0%86%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">JavaScript 中堆的实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A0%86\"><span class=\"toc-text\">堆</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A0%86%E7%9A%84%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">堆的构建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E5%BB%BA%E5%A0%86\"><span class=\"toc-text\">插入建堆</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9C%B0%E5%BB%BA%E5%A0%86\"><span class=\"toc-text\">原地建堆</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E5%89%8D%E5%88%B0%E5%90%8E%EF%BC%8C%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E5%A0%86%E5%8C%96%E5%BB%BA%E5%A0%86\"><span class=\"toc-text\">从前到后，自下而上堆化建堆</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E5%90%8E%E5%88%B0%E5%89%8D%EF%BC%8C%E8%87%AA%E4%B8%8A%E8%80%8C%E4%B8%8B%E5%A0%86%E5%8C%96%E5%BB%BA%E5%A0%86\"><span class=\"toc-text\">从后到前，自上而下堆化建堆</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A0%86%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">堆排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">步骤</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">完整代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">复杂度</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A0%86%E7%9A%84%E7%BB%8F%E5%85%B8%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">堆的经典应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Top-K-%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">Top K 问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E4%BD%8D%E6%95%B0%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">中位数问题</span></a></li></ol></li></ol></li></ol>","author":{"name":"EVE","slug":"blog-author","avatar":"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202201171207395.png","link":"/","description":"keep calm, own minds </br>  put thoughts forward","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}},"mapped":true,"prev_post":{"title":"使用 Rollup 构建并发布一个 Typescipt NPM包","uid":"6b6c4b314e250e6fe18f5d0792f154c3","slug":"使用 Rollup 构建并发布一个 Typescipt NPM包","date":"2022-03-19T15:20:00.000Z","updated":"2022-04-14T05:56:24.359Z","comments":true,"path":"api/articles/使用 Rollup 构建并发布一个 Typescipt NPM包.json","keywords":null,"cover":[],"text":"使用 Rollup 构建并发布一个 Typescipt NPM包前言最近使用 Github Actions 做 CICD 的时候，用到了企业微信提供的 Github 机器人，其提供了一套基于 Webhook 机制的消息推送功能，可以在构建打包或PR发起的时候将相关信息转发到群聊中...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[],"author":{"name":"EVE","slug":"blog-author","avatar":"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202201171207395.png","link":"/","description":"keep calm, own minds </br>  put thoughts forward","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}},"feature":true},"next_post":{"title":"前端CI/CD实践","uid":"1ed68a3a19e8d33a6986f3ce51f04bc8","slug":"前端CI-CD实践","date":"2022-01-20T17:11:50.000Z","updated":"2022-04-14T05:56:39.082Z","comments":true,"path":"api/articles/前端CI-CD实践.json","keywords":null,"cover":"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202201221716950.jpg","text":"前言前置知识 linux docker nginx 可以干嘛作为一套面向开发和运维团队的解决方案，CI/CD 主要解决集成新代码和向用户频繁交付应用的问题。 CI/CD是什么CI/CD（Continuous Intergration/Continuous Delpoy），持续集成...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"EVE","slug":"blog-author","avatar":"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202201171207395.png","link":"/","description":"keep calm, own minds </br>  put thoughts forward","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}},"feature":true}}