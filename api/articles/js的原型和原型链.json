{"title":"js的原型和原型链","uid":"b03e4cdb5d07f78c93b33b2ac1a9cdbd","slug":"js的原型和原型链","date":"2021-09-28T14:31:40.000Z","updated":"2022-01-12T10:47:04.245Z","comments":true,"path":"api/articles/js的原型和原型链.json","keywords":null,"cover":[],"content":"<h1 id=\"原型和原型链\"><a href=\"#原型和原型链\" class=\"headerlink\" title=\"原型和原型链\"></a>原型和原型链</h1><p>javascript 实现面向对象的方式很独特，不同于其他语言，es5 之前的实现采用了原型链的方式，虽然 es6 之后的 class 语法已经很接近传统语言的面向对象，但本质上还是原型链的语法糖，还是有必要了解原型链实现面向对象的设计模式。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"prototype和-proto\"><a href=\"#prototype和-proto\" class=\"headerlink\" title=\"prototype和__proto__\"></a><code>prototype</code>和<code>__proto__</code></h2><ul>\n<li><p>每个对象都有一个<code>__proto__</code>属性，指向它的<code>prototype</code>原型对象</p>\n</li>\n<li><p>每个构造函数都有一个<code>prototype</code>原型对象</p>\n</li>\n<li><p><code>prototype</code>原型对象里的<code>constructor</code></p>\n</li>\n</ul>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ean\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ean<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/20210713144150.png\" alt=\"image-20210713144150174\"></p>\n<ul>\n<li><p>实例对象的<code>__proto__</code>执行构造函数的<code>prototype</code>，从而实现继承</p>\n</li>\n<li><p><code>prototype</code>对象相当于特定类所有实例对象都可以访问的公共容器</p>\n</li>\n</ul>\n<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>valueOf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/20210713151004.png\" alt=\"image-20210713151004180\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>使用 console.dir 能完整打印出对象的属性和方法，在打印 dom 和函数原型的时候很有用</p></blockquote>\n<p>可以看到，<code>arr</code>里面并没有``valueOf<code>方法，按照面向对象理论，我们应该去</code>Array.prototype<code>对象里去找，即</code><strong>proto</strong><code>里面找，发现也没有</code>valueOf`方法</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/20210713151440.png\" alt=\"image-20210713151439985\"></p>\n<p>最终在<code>Array.prototype.__proto__</code>里找到了<code>valueOf</code>方法</p>\n<p>总结一下查找<code>valueOf</code>的过程，当试图访问一个对象的属性时，首先会先在该对象上搜寻，如果没有找到，则查找该对象的原型，若还是没有，则继续查找该对象的原型的原型，依次层层向上搜索，直到找到匹配的方法属性或到达原型链的末端。</p>\n<ol>\n<li><p>当前实例<code>obj</code>，查找<code>obj</code>的属性或方法，找到后返回</p>\n</li>\n<li><p>若没有找到，通过<code>obj.__proto__</code>，找到<code>obj</code>构造函数的<code>prototype</code>，查找里面的属性和方法，找到后返回</p>\n</li>\n<li><p>若还没有找到，把<code>Array.prototype</code>当作 obj，重复以上步骤</p>\n</li>\n<li><p>直到<code>Object.prototype.__proto__ === null</code>时，结束查找，</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">arr ---&gt; Array.prototype ---&gt; Object.prototype ---&gt; null<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>沿着上诉原型链，层层向上查找，直到原型链终点还没有找到，就返回<code>undefined</code></p>\n<h2 id=\"JavaScript-的继承\"><a href=\"#JavaScript-的继承\" class=\"headerlink\" title=\"JavaScript 的继承\"></a>JavaScript 的继承</h2><p>在经典的面向对象语言中，您可能倾向于定义类对象，然后您可以简单地定义哪些类继承哪些类，JavaScript 使用了另一套实现方式，继承的对象函数并不是通过复制而来，而是通过原型链继承（通常被称为 <strong>原型式继承 ——</strong> <strong>prototypal inheritance）</strong>，创建一个继承自另一对象的 JavaScript 对象</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">intro</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">I am </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>属性继承：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Teacher</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> subject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject <span class=\"token operator\">=</span> subject<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>方法继承：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Teacher<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n","feature":true,"text":"原型和原型链javascript 实现面向对象的方式很独特，不同于其他语言，es5 之前的实现采用了原型链的方式，虽然 es6 之后的 class 语法已经很接近传统语言的面向对象，但本质上还是原型链的语法糖，还是有必要了解原型链实现面向对象的设计模式。 prototype和__...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE\"><span class=\"toc-text\">原型和原型链</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#prototype%E5%92%8C-proto\"><span class=\"toc-text\">prototype和__proto__</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9E%8B%E9%93%BE\"><span class=\"toc-text\">原型链</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JavaScript-%E7%9A%84%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">JavaScript 的继承</span></a></li></ol></li></ol>","author":{"name":"eve","slug":"blog-author","avatar":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201171207395.png","link":"/","description":"","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}},"mapped":true,"prev_post":{"title":"win向mac环境迁移","uid":"efa091f902e958fe5c4762b87ffa7084","slug":"win向mac环境迁移","date":"2021-10-02T16:22:33.000Z","updated":"2022-01-18T06:32:30.275Z","comments":true,"path":"api/articles/win向mac环境迁移.json","keywords":null,"cover":[],"text":"win 切换到 mac 的环境迁移买不起 mac，在同学的怂恿下装了黑 mac，前前后后折腾了两三天，总算稳定下来，能开始干活了。 mac 的开发体验确实很舒服，类 linux 的 shell 命令，各种好用的安装工具、终端工具等等。这篇文章主要是记录一下从 win 过渡到 ma...","link":"","photos":[],"count_time":{"symbolsCount":"9.7k","symbolsTime":"9 mins."},"categories":[],"tags":[],"author":{"name":"eve","slug":"blog-author","avatar":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201171207395.png","link":"/","description":"","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}},"feature":true},"next_post":{"title":"User-Agent是什么？怎么获取用户端环境信息？应用场景有哪些？","uid":"9658c73062561165a32c95df5c81dd4f","slug":"user-agent是什么？怎么获取用户端环境信息？","date":"2021-09-28T08:00:53.000Z","updated":"2022-01-12T10:47:04.249Z","comments":true,"path":"api/articles/user-agent是什么？怎么获取用户端环境信息？.json","keywords":null,"cover":[],"text":"User-Agent是什么？怎么获取用户端环境信息？应用场景有哪些？前言这篇文章的来源是朋友面试唯品会时的一个场景题目——如何根据用户的手机型号跳转对应链接并唤起对应厂商的应用商店。问题的关键在于获取用户的设备信息，微信小程序提供的wx.getSystemInfo(Object ...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"eve","slug":"blog-author","avatar":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201171207395.png","link":"/","description":"","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}},"feature":true}}