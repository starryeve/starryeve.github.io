{"title":"win向mac环境迁移","uid":"efa091f902e958fe5c4762b87ffa7084","slug":"win向mac环境迁移","date":"2021-10-02T16:22:33.000Z","updated":"2022-01-18T17:16:01.127Z","comments":true,"path":"api/articles/win向mac环境迁移.json","keywords":null,"cover":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201190115927.jpg","content":"<h1 id=\"win-切换到-mac-的环境迁移\"><a href=\"#win-切换到-mac-的环境迁移\" class=\"headerlink\" title=\"win 切换到 mac 的环境迁移\"></a>win 切换到 mac 的环境迁移</h1><p>买不起 mac，在同学的怂恿下装了黑 mac，前前后后折腾了两三天，总算稳定下来，能开始干活了。 mac 的开发体验确实很舒服，类 linux 的 shell 命令，各种好用的安装工具、终端工具等等。这篇文章主要是记录一下从 win 过渡到 mac 过程中一些必要的软件安装过程，方便之后买正统 mac 转换开发环境（万一呢）。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"环境类\"><a href=\"#环境类\" class=\"headerlink\" title=\"环境类\"></a>环境类</h2><h3 id=\"git-环境\"><a href=\"#git-环境\" class=\"headerlink\" title=\"git 环境\"></a>git 环境</h3><h4 id=\"更改默认-git\"><a href=\"#更改默认-git\" class=\"headerlink\" title=\"更改默认 git\"></a>更改默认 git</h4><p>mac 下自带的<code>git</code>版本比较低，使用<code>homebrew</code>安装升级</p>\n<p>如果没有安装 <code>homebrew</code>，就先去安装下<code>homebrew</code>的国内源——<a href=\"https://gitee.com/cunkai/HomebrewCN\">https://gitee.com/cunkai/HomebrewCN</a></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\">/bin/zsh -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh<span class=\"token variable\">)</span></span>\"</span>\n\n安装 Git\nbrew <span class=\"token function\">install</span> <span class=\"token function\">git</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>看到下面输出时，说明<code>git</code>已经安装完成：</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/image-20211002135334500.png\" alt=\"image-20211002135334500\"></p>\n<p>下面一步是改变<code>git</code>的默认指向：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">// 终端中查看git的指向和版本信息\n$ <span class=\"token function\">which</span> <span class=\"token function\">git</span>\n/usr/bin/git\n$ <span class=\"token function\">git</span> --version\n<span class=\"token function\">git</span> version <span class=\"token number\">2.17</span>.2 <span class=\"token punctuation\">(</span>Apple Git-113<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>接下来我们通过 <code>brew link</code> 将 <code>git</code> 指向我们通过 <code>Homebrew</code> 安装的 <code>git</code>:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">link</span> <span class=\"token function\">git</span> --overwrite\nWarning: Already linked: /usr/local/Cellar/git/2.20.1\nTo relink: brew unlink <span class=\"token function\">git</span> <span class=\"token operator\">&amp;&amp;</span> brew <span class=\"token function\">link</span> <span class=\"token function\">git</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>\u0003link 成功后，退出终端后，再次打开。然后查看 <code>git</code> 指向和版本信息。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">which</span> <span class=\"token function\">git</span>\n/usr/local/bin/git\n$ <span class=\"token function\">git</span> --version\n<span class=\"token function\">git</span> version <span class=\"token number\">2.33</span>.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"git-全局配置\"><a href=\"#git-全局配置\" class=\"headerlink\" title=\"git 全局配置\"></a>git 全局配置</h4><p>检查全局配置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>设置全局用户信息：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global user.name  <span class=\"token string\">\"starryeve\"</span> // 这里是全局信息，细分到单个项目还可以再单独设置\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"starryeve.com\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"配置-ssh\"><a href=\"#配置-ssh\" class=\"headerlink\" title=\"配置 ssh\"></a>配置 ssh</h4><p>在管理 Git 项目上，很多时候都是直接使用 <code>https url</code> 克隆到本地，当然也有有些人使用 <code>SSH url</code> 克隆到本地。</p>\n<p>这两种方式的主要区别在于：</p>\n<ul>\n<li>使用<code>https url</code>克隆对初学者来说会比较方便，复制<code>https url</code>然后到 git Bash 里面直接用 clone 命令克隆到本地就好了，但是每次 fetch 和 push 代码都需要输入账号和密码，这也是 https 方式的麻烦之处。</li>\n<li>而使用<code>SSH url</code>克隆却需要在克隆之前先配置和添加好<code>SSH key</code>，因此，如果你想要使用<code>SSH url</code>克隆的话，你必须是这个项目的拥有者。否则你是无法添加<code>SSH key</code>的，另外 ssh 默认是每次 fetch 和 push 代码都不需要输入账号和密码，如果你想要每次都输入账号密码才能进行 fetch 和 push 也可以另外进行设置。</li>\n</ul>\n<p>下面主要是讲述如何配置使用 ssh 方式来提交和克隆代码。</p>\n<p>1、先在本地生成秘钥，如果关联多个 github 账号就生成多个秘钥<br>ssh-keygen -t rsa -C “<a href=\"mailto:&#115;&#x74;&#x61;&#x72;&#114;&#x79;&#101;&#x76;&#x65;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;\">&#115;&#x74;&#x61;&#x72;&#114;&#x79;&#101;&#x76;&#x65;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#109;</a>“ -f ~/.ssh/id_rsa_my // 我自己的 ssh<br>ssh-keygen -t rsa -C “<a href=\"mailto:&#115;&#116;&#x61;&#114;&#114;&#121;&#101;&#118;&#x65;&#64;&#x71;&#x71;&#x2e;&#99;&#111;&#109;\">&#115;&#116;&#x61;&#114;&#114;&#121;&#101;&#118;&#x65;&#64;&#x71;&#x71;&#x2e;&#99;&#111;&#109;</a>“ -f ~/.ssh/id_rsa_com // 公司的 ssh<br>一路回车，使用默认值，成功后在用户主目录下找到.ssh 目录，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">open</span> ～/.ssh             // 打开ssh所在目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2、查看生成的公钥：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> ~/.ssh/id_rsa_my.pub  // 这里会把公钥显示出来，我们把这段内容复制出来。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3、添加公钥到远程仓库:<br>  登陆你的 github 帐户 -&gt; 点击头像，然后点击 Settings -&gt; 左栏点击 SSH and GPG keys -&gt; 点击 New SSH key<br>  然后将复制的公钥内容，粘贴进 Key 文本域内。 title 域，自己随便起个名字，建议与电脑位置或作用相关的名字，今后可能会新增或者删除 ssh，方便了解是用于哪里的。</p>\n<p>4、查看 ssh 文件是否配置成功<br>ssh -T <a href=\"mailto:&#103;&#x69;&#116;&#64;&#x67;&#105;&#116;&#x68;&#117;&#98;&#x2e;&#x63;&#x6f;&#x6d;\">&#103;&#x69;&#116;&#64;&#x67;&#105;&#116;&#x68;&#117;&#98;&#x2e;&#x63;&#x6f;&#x6d;</a><br>复制代码<br>输出： Hi danygitgit! You’ve successfully authenticated, but GitHub does not provide shell access.<br>设置已经成功了。</p>\n<p>5、修改 git 的 remote url<br>  如果之前添加的是 HTTPS 协议的 github 仓库地址，那么每次 push 或者 pull 仍然需要密码，所以，我们需要将其修改为 ssh 协议的，这样，就不需要这么麻烦了。<br>  那么我们应该怎么办呢？</p>\n<p>6、查看当前的 remote url<br>  首先进入本地仓库，右键 -&gt; Git Bash Here<br>git remote -v<br>复制代码<br>输出： origin <a href=\"https://github.com/danygitgit/document-library.git\">https://github.com/danygitgit/document-library.git</a> (fetch)<br>输出： origin <a href=\"https://github.com/danygitgit/document-library.git\">https://github.com/danygitgit/document-library.git</a> (push)<br>复制代码<br>  如果是以上的结果那么说明此项目是使用 https 协议进行访问的（如果地址是 git 开头则表示是 git 协议）</p>\n<p>7、复制远程仓库的 ssh 链接<br>  登陆你的远程仓库，在上面可以看到你的 ssh 协议相应的 url，类似：</p>\n<p><a href=\"mailto:&#x67;&#x69;&#x74;&#64;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#109;\">&#x67;&#x69;&#x74;&#64;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#109;</a>:danygitgit/document-library.git</p>\n<p>复制此 ssh 链接。</p>\n<p>8、修改 git 的 remote url<br>方法有三种：</p>\n<p>修改命令</p>\n<p>git remote origin set-url [url]<br>复制代码</p>\n<p>先删后加</p>\n<p>git remote rm origin<br>复制代码<br>git remote add origin [url]<br>复制代码</p>\n<p>直接修改 config 文件</p>\n<p>找到仓库下 .git 文件夹下的 config 文件，打开，可以看到以下内容</p>\n<p>[core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true[remote “origin”] url =github.com/danygitgit/… fetch = +refs/heads/:refs/remotes/origin/[branch “master”] remote = origin merge = refs/heads/master</p>\n<p>将文件中的 url =<a href=\"https://github.com/danygitgit/document-library.git\">https://github.com/danygitgit/document-library.git</a> 更改为 url = <a href=\"mailto:&#103;&#105;&#116;&#64;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;\">&#103;&#105;&#116;&#64;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;</a>:danygitgit/document-library.git 即可。<br>  修改后的文件如下</p>\n<p>[core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true[remote “origin”] url = <a href=\"mailto:&#x67;&#x69;&#x74;&#64;&#x67;&#x69;&#x74;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#x6d;\">&#x67;&#x69;&#x74;&#64;&#x67;&#x69;&#x74;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#x6d;</a>:danygitgit/document-library.git fetch = +refs/heads/:refs/remotes/origin/[branch “master”] remote = origin merge = refs/heads/master</p>\n<p>以后，不管是 push 还是 pull，你都不需要再提交密码了。</p>\n<h5 id=\"Sourcetree-配置-ssh-密钥\"><a href=\"#Sourcetree-配置-ssh-密钥\" class=\"headerlink\" title=\"Sourcetree 配置 ssh 密钥\"></a>Sourcetree 配置 ssh 密钥</h5><p>SourceTree 是一款 git 管理可视化工具，就不需要繁琐的敲打命令行了。个人比较推荐，无论在 windows 环境还是 mac 的 os 环境。</p>\n<h3 id=\"shell-环境\"><a href=\"#shell-环境\" class=\"headerlink\" title=\"shell 环境\"></a>shell 环境</h3><h4 id=\"iterm2\"><a href=\"#iterm2\" class=\"headerlink\" title=\"iterm2\"></a>iterm2</h4><p>直接去官网，item2——<a href=\"https://iterm2.com/\">https://iterm2.com/</a></p>\n<h4 id=\"oh-my-zsh\"><a href=\"#oh-my-zsh\" class=\"headerlink\" title=\"oh my zsh\"></a>oh my zsh</h4><p>官方的下载方案：</p>\n<p><strong>via curl</strong>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ohmyzsh&#x2F;ohmyzsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;\n\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>via wget：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sh -c &quot;$(wget -O- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ohmyzsh&#x2F;ohmyzsh&#x2F;master&#x2F;tools&#x2F;install.s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>基本上都不能成功，可以先用<code>git</code> 下载 ，再替换 zshrc：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh\n\n<span class=\"token function\">cp</span> ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"node-环境\"><a href=\"#node-环境\" class=\"headerlink\" title=\"node 环境\"></a>node 环境</h3><p>对于前端工程师，node 环境必不可少，一般直接安装 nodejs 即可，这里使用 nvm 来管理 node 版本。<a href=\"https://github.com/creationix/nvm\">nvm</a> 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm，如果是需要管理 Windows 下的 node，官方推荐是使用 <a href=\"https://github.com/hakobera/nvmw\">nvm</a> 或 <a href=\"https://github.com/coreybutler/nvm-windows\">nvm-windows</a> 。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Mac 下通过 brew install nvm 所安装的 nvm ，由于安装路径不同，无法正确启用。建议使用 brew uninstall nvm 卸载掉之后，通过 curl 或 wget 安装</p></blockquote>\n<h4 id=\"安装-nvm\"><a href=\"#安装-nvm\" class=\"headerlink\" title=\"安装 nvm\"></a>安装 nvm</h4><h5 id=\"卸载已有的-node-npm：\"><a href=\"#卸载已有的-node-npm：\" class=\"headerlink\" title=\"卸载已有的 node/npm：\"></a>卸载已有的 node/npm：</h5><p>如果之前是在官网下载的 node 安装包，运行后会自动安装在全局目录，其中</p>\n<p>node 命令在 /usr/local/bin/node ，npm 命令在全局 node_modules 目录中，具体路径为 /usr/local/lib/node_modules/npm</p>\n<p>安装 nvm 之后最好先删除下已安装的 node 和全局 node 模块：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm ls -g --depth&#x3D;0 #查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装\n\nsudo rm -rf &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules #删除全局 node_modules 目录\nsudo rm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node #删除 node\ncd  &#x2F;usr&#x2F;local&#x2F;bin &amp;&amp; ls -l | grep &quot;..&#x2F;lib&#x2F;node_modules&#x2F;&quot; | awk &#39;&#123;print $9&#125;&#39;| xargs rm #删除全局 node 模块注册的软链<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h5 id=\"安装-nvm-1\"><a href=\"#安装-nvm-1\" class=\"headerlink\" title=\"安装 nvm\"></a>安装 nvm</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">curl -o- https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;creationix&#x2F;nvm&#x2F;v0.29.0&#x2F;install.sh | bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这里使用了 curl 安装 nvm 会一直失败，因为总所周之多原因，raw.githubusercontent.com 的域名遭受 dns 污染，使得国内几乎没办法访问。解决办法有很多，这里图省事，直接开代理，详情参考——</p></blockquote>\n<p>安装 <code>nvm</code> 之后，出现 <code>nvm command not found</code> 的问题。原因是<code>Mac</code> 新版本中终端是 <code>zsh</code>，所以使用 <code>.bash_profile</code> 文件不会生效，需要使用 <code>zsh</code> 的文件才行。</p>\n<h5 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h5><ol>\n<li><code>cd ~</code></li>\n<li><code>touch .zshrc</code></li>\n<li>打开 <code>.zshrc</code> 文件</li>\n<li>写入如下代码</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">NVM_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token environment constant\">$HOME</span>/.nvm\"</span>\n<span class=\"token punctuation\">[</span> -s <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>. <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/nvm.sh\"</span>  <span class=\"token comment\"># This loads nvm</span>\n<span class=\"token punctuation\">[</span> -s <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/bash_completion\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>. <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/bash_completion\"</span>  <span class=\"token comment\"># This loads nvm bash_completion</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"5\">\n<li><p>保存</p>\n</li>\n<li><p><code>source ~/.zshrc</code></p>\n</li>\n<li><p>退出终端，重新打开，使用 <code>nvm</code> 命令即可</p>\n</li>\n</ol>\n<h5 id=\"升级-nvm-的三种方式\"><a href=\"#升级-nvm-的三种方式\" class=\"headerlink\" title=\"升级 nvm 的三种方式\"></a>升级 nvm 的三种方式</h5><ol>\n<li><p>通过 zsh-nvm</p>\n<p>如果你的 shell 用的是<code>zsh</code>，那么你可以安装<a href=\"https://link.jianshu.com/?t=https://github.com/lukechilds/zsh-nvm\">zsh-nvm</a>，它作为 zsh 的插件，提供了<code>nvm upgrade</code>的命令，而且它会自动帮你配置 nvm 到环境中。这个方案最方便，只要你用<code>zsh</code>就行了，不过<a href=\"https://link.jianshu.com/?t=https://github.com/lukechilds/zsh-nvm#manually\">zsh-nvm 官方文档</a>表示就算你用<code>bash</code>也是可以支持的。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/lukechilds/zsh-nvm ~/.oh-my-zsh/custom/plugins/zsh-nvm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>下载完再通过<code>vim</code>添加到.<code>zshrc</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">plugins</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>zsh-nvm<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>通过 git</p>\n<p>NVM 安装的过程其实就是把 NVM 的代码直接通过 git 拉到<code>~/.nvm</code>目录中。也就是说，它就是标准的 git 托管的目录，那么要想更新就可以直接到这个目录下，并通过 git 更新到最新代码或者某个版本的代码就行了。</p>\n</li>\n<li><p>重新安装一遍</p>\n<p>再通过<code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.4/install.sh | bash</code>重新运行一遍安装脚本就行了，它实际上就是通过 git 再把代码更新到某个版本，原理和 2 是相同的。</p>\n</li>\n</ol>\n<h3 id=\"安装多个-node\"><a href=\"#安装多个-node\" class=\"headerlink\" title=\"安装多个 node\"></a>安装多个 node</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">1. 查看下当前可用的node版本\n   $ nvm ls或者nvm list\n2. 选择合适的版本安装\n   nvm install 10.15.3          &#x2F;&#x2F; 安装指定版本的node，会自动切换到该版本\n   nvm install node             &#x2F;&#x2F; 安装最新稳定版本的node（即current版本）\n3. 查看安装是否成功\n   $ node -v\n4. 更多nvm命令参考\n   nvm ls-remote                &#x2F;&#x2F; 查看服务器上的node的所有可用版本\n   nvm uninstall 10.15.3        &#x2F;&#x2F; 卸载某个版本的node\n   nvm use 10.15.3              &#x2F;&#x2F; 切换到某个版本的node\n   nvm alias LTS 10.15.3        &#x2F;&#x2F; 给某个版本起个别名\n   nvm unalias LTS              &#x2F;&#x2F; 取消别名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>安装后要为 shell 设置一个默认 node 版本，不然每次打开都要 use。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nvm <span class=\"token builtin class-name\">alias</span> default <span class=\"token number\">16.10</span>.0    // 因为我为16.10.0设置了别名，所以用别名和版本都可以<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"安装-yarn\"><a href=\"#安装-yarn\" class=\"headerlink\" title=\"安装 yarn\"></a>安装 yarn</h3><ul>\n<li><strong>MacOS 直接使用脚本</strong></li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -o- -L https://yarnpkg.com/install.sh <span class=\"token operator\">|</span> <span class=\"token function\">bash</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li><strong>Homebrew 方式</strong></li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> <span class=\"token function\">yarn</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><strong>npm 方式</strong></li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g <span class=\"token function\">yarn</span>\n复制代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>查看是否安装成功</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> --version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"安装-vue-cli\"><a href=\"#安装-vue-cli\" class=\"headerlink\" title=\"安装 vue-cli\"></a>安装 vue-cli</h3><p>Vue 提供了一个<a href=\"https://github.com/vuejs/vue-cli\">官方的 CLI</a>，为单页面应用 (SPA) 快速搭建繁杂的脚手架。它为现代前端工作流提供了功能齐备的构建设置。只需要几分钟的时间就可以运行起来并带有热重载、保存时 lint 校验，以及生产环境可用的构建版本。更多详情可查阅 <a href=\"https://cli.vuejs.org/\">Vue CLI 的文档</a>。</p>\n<p>对于 Vue 3，你应该使用 <code>npm</code> 上可用的 Vue CLI v4.5 作为 <code>@vue/cli</code>。要升级，你应该需要全局重新安装最新版本的 <code>@vue/cli</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> global <span class=\"token function\">add</span> @vue/cli\n<span class=\"token comment\"># 或</span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g @vue/cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>然后在 Vue 项目中运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">vue upgrade --next<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"文档类\"><a href=\"#文档类\" class=\"headerlink\" title=\"文档类\"></a>文档类</h2><h3 id=\"typora\"><a href=\"#typora\" class=\"headerlink\" title=\"typora\"></a>typora</h3><p>写文档，写博客的必备软件——<a href=\"https://typora.io/\">https://typora.io/</a></p>\n<h3 id=\"picgo\"><a href=\"#picgo\" class=\"headerlink\" title=\"picgo\"></a>picgo</h3><p>图床，搭配 typora 使用——<a href=\"https://github.com/Molunerfinn/PicGo/releases\">https://github.com/Molunerfinn/PicGo/releases</a></p>\n<p>安装之后打开主界面</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/v2-83da997e41df3d5a366492075e84e8c6_720w.jpg\" alt=\"img\"></p>\n<p>选择最底下的插件设置，搜索<strong>gitee</strong></p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/v2-e571ed50235f2f82661b5b1315419bd5_720w.jpg\" alt=\"img\"></p>\n<p>点击右边的 gitee-uploader 1.1.2 开始安装</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这里注意一下，必须要先安装<a href=\"https://link.zhihu.com/?target=https://nodejs.org/en/\">node.js</a>才能安装插件，没装的自己装一下，然后重启就行。</p></blockquote>\n<p>注册一个 gitee 账户，创建一个专门用来放图片的仓库，然后按如下配置即可。</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/image-20211002205522728.png\" alt=\"image-20211002205522728\"></p>\n<h3 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h3><p>hexo 是静态网页搭建平台，支持 markdown，平时写文章写博客都很方便。</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>hexo 需要 node 环境，使用国内 npm 源更容易安装成功。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g cnpm --registry<span class=\"token operator\">=</span>https://registry.npm.taobao.org\ncnpm <span class=\"token function\">install</span> hexo-cli -g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>安装完成以后，需要初始化一下项目，执行下列命令：</p>\n<pre class=\"line-numbers language-crystal\" data-language=\"crystal\"><code class=\"language-crystal\">$ hexo init\n$ npm install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>完成以后，项目大概目录就是这样的：</p>\n<pre class=\"line-numbers language-sqf\" data-language=\"sqf\"><code class=\"language-sqf\"><span class=\"token punctuation\">.</span>\n├── _config<span class=\"token punctuation\">.</span>yml\n├── package<span class=\"token punctuation\">.</span>json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>_config.yml</strong><br>网站的配置信息，可以在此配置大部分的参数。</p>\n<p><strong>package.json</strong><br>应用程序的信息。</p>\n<hr>\n<p>接下来可以在本地启服务来查看一下项目的初始状态：</p>\n<pre class=\"line-numbers language-pgsql\" data-language=\"pgsql\"><code class=\"language-pgsql\">$ npm install hexo-server --save\n$ hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>效果大概就是下面的样子：<br><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/bVboIDi.png\"></p>\n<p>hexo 上有很多开源的主题，有时间可以慢慢折腾，这里不做介绍。</p>\n<h4 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h4><p><strong>1、github 上新建一个仓库</strong></p>\n<hr>\n<p>登录自己的 github 后，在界面右上角用户信息点击左边的加号，新建一个与用户名字相同的 repository，github 会默认设置成用户的博客：<br><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/image-20211003223011052.png\" alt=\"image-20211003223011052\"></p>\n<p>设置页面里面有分支选项，如果有 master 分支，会默认成博客的首选代码；</p>\n<hr>\n<p><strong>2、将本地搭建好的 hexo 发布到 github 上：</strong></p>\n<p><strong>安装插件：</strong></p>\n<pre class=\"line-numbers language-ada\" data-language=\"ada\"><code class=\"language-ada\"><span class=\"token variable\">npm</span> <span class=\"token variable\">install</span> <span class=\"token variable\">hexo</span><span class=\"token operator\">-</span><span class=\"token variable\">deployer</span><span class=\"token operator\">-</span><span class=\"token variable\">git</span> <span class=\"token comment\">--save</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>修改网站配置文件_config.yml,添加 deploy 信息：</strong></p>\n<pre class=\"line-numbers language-dts\" data-language=\"dts\"><code class=\"language-dts\">deploy:\n  type: git\n  repo: git@github.com:starryeve&#x2F;starryeve.github.io.git\n  branch: master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的 repo 的配置信息，替换成自己的项目名字</p>\n<hr>\n<p>3、<strong>生成 SSH key:</strong></p>\n<p>按照网上的教程生成 ssh key 的时候是直接 ssh-add,但是失败了，调查问题，发现原因是因为，我是第一次使用 ssh-agent 代理，第一次需要首先执行以下命令，以后就不需要了（<a href=\"https://link.segmentfault.com/?url=http://www.cnblogs.com/kex1n/p/5229493.html\">具体原来请参考此处链接</a>）：</p>\n<pre class=\"line-numbers language-crystal\" data-language=\"crystal\"><code class=\"language-crystal\">$ ssh<span class=\"token operator\">-</span>agent bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>以上命令回车，启动进程，后再输入命令：</p>\n<pre class=\"line-numbers language-arcade\" data-language=\"arcade\"><code class=\"language-arcade\">$ ssh-add ~&#x2F;.ssh&#x2F;id_rsa_blog<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>接下来的操作就跟上面配置 ssh 完全一样了，不过多介绍。</p>\n<hr>\n<p>验证是否连接成功：</p>\n<pre class=\"line-numbers language-crystal\" data-language=\"crystal\"><code class=\"language-crystal\">$ ssh <span class=\"token operator\">-</span><span class=\"token constant\">T</span> git<span class=\"token variable\">@github</span><span class=\"token punctuation\">.</span>com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>出现下面的语句说明你的 ssh key 已经配置好了</p>\n<pre class=\"line-numbers language-ada\" data-language=\"ada\"><code class=\"language-ada\"><span class=\"token variable\">Hi</span> <span class=\"token variable\">wispyoureyes</span>! <span class=\"token variable\">You</span><span class=\"token attr-name\">'ve</span> <span class=\"token variable\">successfully</span> <span class=\"token variable\">authenticated</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">but</span> <span class=\"token variable\">GitHub</span> <span class=\"token variable\">does</span> <span class=\"token keyword\">not</span> <span class=\"token variable\">provide</span> <span class=\"token variable\">shell</span> <span class=\"token keyword\">access</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<p>到这为止，本地跟远程 github 的连接已经建立，在项目中，直接生成静态文件，上传就可以了：</p>\n<pre class=\"line-numbers language-awk\" data-language=\"awk\"><code class=\"language-awk\">$ hexo clean  &#x2F;&#x2F;清除缓存文件db.json和已生成的静态文件public\n$ hexo g   &#x2F;&#x2F;生成网站静态文件到默认设置的public文件夹\n$ hexo d   &#x2F;&#x2F;部署网站到设定的仓库<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"软件工具\"><a href=\"#软件工具\" class=\"headerlink\" title=\"软件工具\"></a>软件工具</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以下是 mac 必备软件推荐，这里推荐两个 mac 资源网站：<a href=\"https://link.juejin.cn/?target=https://xclient.info/\">xclient</a>、<a href=\"https://link.juejin.cn/?target=https://www.macwk.com/\">macwk</a>。</p></blockquote>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><h3 id=\"nvm：\"><a href=\"#nvm：\" class=\"headerlink\" title=\"nvm：\"></a>nvm：</h3><p><a href=\"https://www.cnblogs.com/kaiye/p/4937191.html\">https://www.cnblogs.com/kaiye/p/4937191.html</a></p>\n<p><a href=\"https://juejin.cn/post/6979140141134643236\">https://juejin.cn/post/6979140141134643236</a></p>\n<p><a href=\"https://www.jianshu.com/p/045df8e20ebe\">https://www.jianshu.com/p/045df8e20ebe</a></p>\n<h3 id=\"mac-下环境\"><a href=\"#mac-下环境\" class=\"headerlink\" title=\"mac 下环境\"></a>mac 下环境</h3><p><a href=\"https://juejin.cn/post/6844904167882883085\">https://juejin.cn/post/6844904167882883085</a></p>\n","text":"win 切换到 mac 的环境迁移买不起 mac，在同学的怂恿下装了黑 mac，前前后后折腾了两三天，总算稳定下来，能开始干活了。 mac 的开发体验确实很舒服，类 linux 的 shell 命令，各种好用的安装工具、终端工具等等。这篇文章主要是记录一下从 win 过渡到 ma...","link":"","photos":[],"count_time":{"symbolsCount":"9.7k","symbolsTime":"9 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#win-%E5%88%87%E6%8D%A2%E5%88%B0-mac-%E7%9A%84%E7%8E%AF%E5%A2%83%E8%BF%81%E7%A7%BB\"><span class=\"toc-text\">win 切换到 mac 的环境迁移</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E7%B1%BB\"><span class=\"toc-text\">环境类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#git-%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">git 环境</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4-git\"><span class=\"toc-text\">更改默认 git</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#git-%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">git 全局配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE-ssh\"><span class=\"toc-text\">配置 ssh</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Sourcetree-%E9%85%8D%E7%BD%AE-ssh-%E5%AF%86%E9%92%A5\"><span class=\"toc-text\">Sourcetree 配置 ssh 密钥</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#shell-%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">shell 环境</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#iterm2\"><span class=\"toc-text\">iterm2</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#oh-my-zsh\"><span class=\"toc-text\">oh my zsh</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#node-%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">node 环境</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-nvm\"><span class=\"toc-text\">安装 nvm</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8D%B8%E8%BD%BD%E5%B7%B2%E6%9C%89%E7%9A%84-node-npm%EF%BC%9A\"><span class=\"toc-text\">卸载已有的 node&#x2F;npm：</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-nvm-1\"><span class=\"toc-text\">安装 nvm</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">解决</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8D%87%E7%BA%A7-nvm-%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">升级 nvm 的三种方式</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AA-node\"><span class=\"toc-text\">安装多个 node</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-yarn\"><span class=\"toc-text\">安装 yarn</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-vue-cli\"><span class=\"toc-text\">安装 vue-cli</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E6%A1%A3%E7%B1%BB\"><span class=\"toc-text\">文档类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#typora\"><span class=\"toc-text\">typora</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#picgo\"><span class=\"toc-text\">picgo</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hexo\"><span class=\"toc-text\">hexo</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">部署</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BD%AF%E4%BB%B6%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">软件工具</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5\"><span class=\"toc-text\">参考链接</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#nvm%EF%BC%9A\"><span class=\"toc-text\">nvm：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#mac-%E4%B8%8B%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">mac 下环境</span></a></li></ol></li></ol></li></ol>","author":{"name":"EVE","slug":"blog-author","avatar":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201171207395.png","link":"/","description":"keep calm, own minds </br>  put thoughts forward","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}},"mapped":true,"prev_post":{"title":"前端开发调试技巧","uid":"4fa07bcbd0aa3f4d5eb9b3a018e120bd","slug":"前端开发调试技巧","date":"2022-01-19T05:42:36.000Z","updated":"2022-01-19T05:54:38.720Z","comments":true,"path":"api/articles/前端开发调试技巧.json","keywords":null,"cover":[],"text":"前端开发调试技巧前端Debug的特点多平台 浏览器 Hybrid NodeJs 小程序 桌面GUI …… 多环境 本地开发环境 线上生产环境 ……. 多工具 Chrome Devtools Charles Spy-Debugger spy-debugger + charles 移...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"EVE","slug":"blog-author","avatar":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201171207395.png","link":"/","description":"keep calm, own minds </br>  put thoughts forward","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}},"feature":true},"next_post":{"title":"User-Agent的应用场景","uid":"e51132035092c368289183fb10ca1df0","slug":"user-agent是什么？有哪些应用场景？","date":"2021-09-28T08:00:53.000Z","updated":"2022-01-19T06:03:01.729Z","comments":true,"path":"api/articles/user-agent是什么？有哪些应用场景？.json","keywords":null,"cover":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201190116139.jpg","text":" 前言这篇文章的来源是朋友面试唯品会时的一个场景题目——如何根据用户的手机型号跳转对应链接并唤起对应厂商的应用商店。问题的关键在于获取用户的设备信息，微信小程序提供的wx.getSystemInfo(Object object)api就能解决这个问题。但面试官问的应该是h5客户端...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"EVE","slug":"blog-author","avatar":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201171207395.png","link":"/","description":"keep calm, own minds </br>  put thoughts forward","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}}}}