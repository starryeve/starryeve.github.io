{"title":"git工作流程","uid":"e2cb4e89611544cf3c6b12db41ef12fa","slug":"git工作流程","date":"2021-08-07T08:57:12.000Z","updated":"2022-01-12T10:47:04.231Z","comments":true,"path":"api/articles/git工作流程.json","keywords":null,"cover":[],"content":"<h1 id=\"git流程\"><a href=\"#git流程\" class=\"headerlink\" title=\"git流程\"></a>git流程</h1><ol>\n<li><code>git clone</code> 克隆远程资源到本地目录，作为工作区</li>\n<li>在工作区上修改文件</li>\n<li>每次修改前，先切换<code>master</code>主分支，使用<code>git pull</code>拉取远程资源，<code>merge</code>合并到本地开发分支，以更新本地文件</li>\n<li>本地修改后，通过<code>git status</code>查看文件状态，使用<code>git add</code>添加文件到暂存区</li>\n<li><code>git commit</code>将改动从暂存区添加到当前本地仓库</li>\n<li><code>git push</code> 将修改从本地仓库推送到远端仓库</li>\n</ol>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/1460000039320931.png\" alt=\"git-working-area.png\"></p>\n<h2 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h2><ol>\n<li><p>查看分支，-a查看远程：</p>\n<p><code>git branch -a</code></p>\n</li>\n<li><p>创建分支，-b创建分支后，切换到新的分支工作：</p>\n<p><code>git checkout -b ean</code></p>\n</li>\n<li><p>提交本地分支到远程仓库：</p>\n<p><code>git push origin ean</code> </p>\n</li>\n<li><p>合并分支：</p>\n<p><code>git checkout master</code></p>\n<p><code>git merge dev</code></p>\n</li>\n<li><p>处理冲突：</p>\n</li>\n<li><p>删除远程分支：</p>\n<p><code>git push --delete origin dev</code></p>\n</li>\n</ol>\n<h2 id=\"stash操作-只能暂存已跟踪的，不能暂存新添加的\"><a href=\"#stash操作-只能暂存已跟踪的，不能暂存新添加的\" class=\"headerlink\" title=\"stash操作(只能暂存已跟踪的，不能暂存新添加的)\"></a>stash操作(只能暂存已跟踪的，不能暂存新添加的)</h2><h3 id=\"应用场景：\"><a href=\"#应用场景：\" class=\"headerlink\" title=\"应用场景：\"></a>应用场景：</h3><ol>\n<li>当正在<code>dev</code>分支上开发某个模块时，项目中出现了一个bug，需要紧急修复，而正在开发的内容只是完成一半，还不想提交，这时就可以使用<code>git stashs</code>将修改的内容保存到堆栈区，切换<code>hotfix</code>分支进行bug修复。修复完成后，再切回到<code>dev</code>，从堆栈中恢复刚刚保存的内容。</li>\n<li>由于疏忽，本应该在<code>dev</code>分支上开发的内容，却在<code>master</code>上进行了开发，需要重新切回到<code>dev</code>分支上进行开发，可以用<code>git stash</code>将内容保存到堆栈中，切回到<code>dev</code>，再次恢复内容即可。</li>\n</ol>\n<h3 id=\"命令：\"><a href=\"#命令：\" class=\"headerlink\" title=\"命令：\"></a>命令：</h3><ol>\n<li><p><code>git stash</code></p>\n<p>能够将所有未提交的修改（工作区和暂存区）保存至堆栈中，用于后续恢复当前工作目录</p>\n</li>\n<li><p><code>git stash save</code></p>\n<p>作用等同于git stash，区别是可以加一些注释</p>\n</li>\n<li><p><code>git stash list</code> </p>\n<p>查看当前stash中的内容</p>\n</li>\n<li><p><code>git stash pop</code></p>\n<p>将当前stash中的内容弹出，并应用到当前分支对应的工作目录上。<br>注：该命令将堆栈中最近保存的内容删除（先进后出）</p>\n</li>\n<li><p><code>git stash apply</code></p>\n<p>将堆栈中的内容应用到当前目录，不同于git stash pop，该命令不会将内容从堆栈中删除，也就说该命令能够将堆栈的内容多次应用到工作目录中，适应于多个分支的情况。</p>\n</li>\n<li><p><code>git stash drop + 名称</code></p>\n<p>从堆栈中移除某个指定的stash</p>\n</li>\n<li><p><code>git stash clear</code></p>\n<p>清除堆栈中的所有 内容</p>\n</li>\n<li><p><code>git stash show</code></p>\n<p>查看堆栈中最新保存的stash和当前目录的差异</p>\n</li>\n<li><p><code>git stash branch</code><br>从最新的stash创建分支。<br>应用场景：当储藏了部分工作，暂时不去理会，继续在当前分支进行开发，后续想将stash中的内容恢复到当前工作目录时，如果是针对同一个文件的修改（即便不是同行数据），那么可能会发生冲突，恢复失败，这里通过创建新的分支来解决。可以用于解决stash中的内容和当前目录的内容发生冲突的情景。<br>发生冲突时，需手动解决冲突。</p>\n</li>\n</ol>\n<h2 id=\"回滚操作\"><a href=\"#回滚操作\" class=\"headerlink\" title=\"回滚操作\"></a>回滚操作</h2><h3 id=\"回滚场景：仅在工作区修改时\"><a href=\"#回滚场景：仅在工作区修改时\" class=\"headerlink\" title=\"回滚场景：仅在工作区修改时\"></a>回滚场景：仅在工作区修改时</h3><p>当文件在工作区修改，还没有提交到暂存区和本地仓库时，可以用 <code>git checkout -- 文件名</code> 来回滚这部分修改。不过需要特别留意的是<strong>这些改动没有提交到 Git 仓库，Git 无法追踪其历史，一旦回滚就直接丢弃了</strong>。</p>\n<h3 id=\"回滚场景：已添加到暂存区时\"><a href=\"#回滚场景：已添加到暂存区时\" class=\"headerlink\" title=\"回滚场景：已添加到暂存区时\"></a>回滚场景：已添加到暂存区时</h3><p>即执行过 <code>git add</code> 添加到暂存区，但还没 commit，这时可以用 <code>git reset HEAD 文件名</code> 回滚。 回滚后工作区会保留该文件的改动，可重新编辑再提交，或者 <code>git checkout -- 文件名</code> 彻底丢弃修改。</p>\n<h3 id=\"回滚场景：已-commit，但还没有-push-时\"><a href=\"#回滚场景：已-commit，但还没有-push-时\" class=\"headerlink\" title=\"回滚场景：已 commit，但还没有 push 时\"></a>回滚场景：已 commit，但还没有 push 时</h3><p>即已经提交到本地代码库了，不过还没有 push 到远端。这时候可用 <code>git reset</code> 命令，命令格式为：</p>\n<p><code>git reset &lt;要回滚到的 commit&gt;</code></p>\n<p><code>git reset</code> 默认会将被丢弃的记录所改动的文件保留在工作区中，以便重新编辑和再提交。加上 <code>--hard</code> 选项则不保留这部分内容，需谨慎使用。</p>\n<p><img src=\"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/view.png\" alt=\"preview\"></p>\n<p><code>git reflog</code> 查看操作历史，找到之前 HEAD 的 hash 值，然后 <code>git reset --hard</code> 到那个 hash 即可</p>\n<h2 id=\"vscode可视化git插件：\"><a href=\"#vscode可视化git插件：\" class=\"headerlink\" title=\"vscode可视化git插件：\"></a>vscode可视化git插件：</h2><ul>\n<li>gitlens</li>\n</ul>\n","feature":true,"text":"git流程 git clone 克隆远程资源到本地目录，作为工作区 在工作区上修改文件 每次修改前，先切换master主分支，使用git pull拉取远程资源，merge合并到本地开发分支，以更新本地文件 本地修改后，通过git status查看文件状态，使用git add添加文...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"git","slug":"git","count":1,"path":"api/categories/git.json"}],"tags":[{"name":"git","slug":"git","count":1,"path":"api/tags/git.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#git%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">git流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">分支操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#stash%E6%93%8D%E4%BD%9C-%E5%8F%AA%E8%83%BD%E6%9A%82%E5%AD%98%E5%B7%B2%E8%B7%9F%E8%B8%AA%E7%9A%84%EF%BC%8C%E4%B8%8D%E8%83%BD%E6%9A%82%E5%AD%98%E6%96%B0%E6%B7%BB%E5%8A%A0%E7%9A%84\"><span class=\"toc-text\">stash操作(只能暂存已跟踪的，不能暂存新添加的)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9A\"><span class=\"toc-text\">应用场景：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4%EF%BC%9A\"><span class=\"toc-text\">命令：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E6%BB%9A%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">回滚操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E6%BB%9A%E5%9C%BA%E6%99%AF%EF%BC%9A%E4%BB%85%E5%9C%A8%E5%B7%A5%E4%BD%9C%E5%8C%BA%E4%BF%AE%E6%94%B9%E6%97%B6\"><span class=\"toc-text\">回滚场景：仅在工作区修改时</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E6%BB%9A%E5%9C%BA%E6%99%AF%EF%BC%9A%E5%B7%B2%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%9A%82%E5%AD%98%E5%8C%BA%E6%97%B6\"><span class=\"toc-text\">回滚场景：已添加到暂存区时</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E6%BB%9A%E5%9C%BA%E6%99%AF%EF%BC%9A%E5%B7%B2-commit%EF%BC%8C%E4%BD%86%E8%BF%98%E6%B2%A1%E6%9C%89-push-%E6%97%B6\"><span class=\"toc-text\">回滚场景：已 commit，但还没有 push 时</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#vscode%E5%8F%AF%E8%A7%86%E5%8C%96git%E6%8F%92%E4%BB%B6%EF%BC%9A\"><span class=\"toc-text\">vscode可视化git插件：</span></a></li></ol></li></ol>","author":{"name":"EVE","slug":"blog-author","avatar":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201171207395.png","link":"/","description":"keep calm, own minds </br>  put thoughts forward","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}},"mapped":true,"prev_post":{"title":"User-Agent是什么？应用场景有哪些？","uid":"dc9769c9f19ac83e8df4556961b59c8f","slug":"user-agent是什么？怎么获取用户端环境信息？","date":"2021-09-28T08:00:53.000Z","updated":"2022-01-18T17:17:37.694Z","comments":true,"path":"api/articles/user-agent是什么？怎么获取用户端环境信息？.json","keywords":null,"cover":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201190116139.jpg","text":"User-Agent是什么？应用场景有哪些？前言这篇文章的来源是朋友面试唯品会时的一个场景题目——如何根据用户的手机型号跳转对应链接并唤起对应厂商的应用商店。问题的关键在于获取用户的设备信息，微信小程序提供的wx.getSystemInfo(Object object)api就能...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"EVE","slug":"blog-author","avatar":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201171207395.png","link":"/","description":"keep calm, own minds </br>  put thoughts forward","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}},"feature":true},"next_post":{"title":"webpack5搭建vue3环境","uid":"4671e4a4ddc838dd69dd6aa254700d36","slug":"webpack5搭建vue3环境","date":"2021-08-07T08:52:54.000Z","updated":"2022-01-18T17:14:39.325Z","comments":true,"path":"api/articles/webpack5搭建vue3环境.json","keywords":null,"cover":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201190114249.jpg","text":"使用webpack5搭建vue3环境前言平时项目开发，从稳定性和易用性的角度，一般很少从头到尾搭建环境，大多数是采用以下的方法： 用官方脚手架vue-cli快速搭建项目 在别人搭建好的项目基础上开发 虽然能快速上手，但不利用项目把控能力的培养。无论是从面试的角度还是从问题排查的角...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"webpack","slug":"webpack","count":1,"path":"api/categories/webpack.json"}],"tags":[{"name":"webpack web前端","slug":"webpack-web前端","count":1,"path":"api/tags/webpack-web前端.json"}],"author":{"name":"EVE","slug":"blog-author","avatar":"https://gitee.com/zeng-fanhao/figure-bed/raw/master/images/202201171207395.png","link":"/","description":"keep calm, own minds </br>  put thoughts forward","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}}}}