{"title":"使用 Rollup 构建并发布一个 Typescipt NPM包","uid":"6b6c4b314e250e6fe18f5d0792f154c3","slug":"使用 Rollup 构建并发布一个 Typescipt NPM包","date":"2022-03-19T15:20:00.000Z","updated":"2022-04-14T05:56:24.359Z","comments":true,"path":"api/articles/使用 Rollup 构建并发布一个 Typescipt NPM包.json","keywords":null,"cover":[],"content":"<h1 id=\"使用-Rollup-构建并发布一个-Typescipt-NPM包\"><a href=\"#使用-Rollup-构建并发布一个-Typescipt-NPM包\" class=\"headerlink\" title=\"使用 Rollup 构建并发布一个 Typescipt NPM包\"></a>使用 Rollup 构建并发布一个 Typescipt NPM包</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近使用 <strong>Github Actions</strong> 做 <strong>CICD</strong> 的时候，用到了企业微信提供的 Github 机器人，其提供了一套基于 <strong>Webhook</strong> 机制的消息推送功能，可以在构建打包或PR发起的时候将相关信息转发到群聊中。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>关于 Webhook 的介绍看这里：<a href=\"https://segmentfault.com/a/1190000020249988\">https://segmentfault.com/a/1190000020249988</a></p></blockquote>\n<p>根据官方提供的文档，其实也可以自己写代码，来处理一些自定义场景，比如<strong>转发 Sentry 告警</strong>到群聊中（Sentry 本身也提供了这种 Webhook 机制）。</p>\n<p>为了方便使用和嵌入项目中去，我把官方文档发送消息的处理做了一个封装，并加上了 Typescript 类型支持，并以 NPM 包的形式进行发布（<a href=\"https://github.com/starryeve/webhook-chatbot\">webhook-chatbot</a>）。下面是过程中的一些记录：</p>\n<h2 id=\"需要用到的工具\"><a href=\"#需要用到的工具\" class=\"headerlink\" title=\"需要用到的工具\"></a>需要用到的工具</h2><ul>\n<li>npm 账号：将构建后的 lib 包发布到 npm 仓库</li>\n<li>rollup：将所有使用到的模块打包到一个或多个最终的发布文件中</li>\n<li>typescript：提供类型检测和代码提示</li>\n<li>eslint + prettier：代码风格校验和自动格式化</li>\n</ul>\n<h2 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h2><p>大概要用到的东西理清楚后，就可以新建一个新项目了</p>\n<ol>\n<li><p>创建包文件夹</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> messaging-robot <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> messaging-robot<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p><strong>yarn</strong> 初始化包</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> init -y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p><strong>git</strong> 初始化并关联 <strong>Github</strong> 远程仓库</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init\n<span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"init\"</span>\n<span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin <span class=\"token operator\">&lt;</span>Git Repository Url<span class=\"token operator\">></span>\n<span class=\"token function\">git</span> push -u origin master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h2 id=\"使用-Typescript\"><a href=\"#使用-Typescript\" class=\"headerlink\" title=\"使用 Typescript\"></a>使用 Typescript</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> typescipt -D <span class=\"token operator\">&amp;&amp;</span> npx tsc --init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>生成 <strong>tsconfig.json</strong>文件，用来配置 ts 的编译选项</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// tsconfig.json</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"declaration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 生成 .d.ts 声明文件</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// // 提供两个helper函数__importStar和__importDefault,通过为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性</span>\n    <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ESNext\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 最新的 es 语法提示，同时不引入 dom 相关的定义文件</span>\n    <span class=\"token comment\">// \"module\": \"esnext\", // 源代码使用模块类型</span>\n    <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Node\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 能在 esm 项目中解析 cjs 模块</span>\n     <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 编译后的文件存到到哪个目录</span>\n    <span class=\"token property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 编译删除注释，这里选择保留</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es6\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 目标 ECMAScript 版本， Node v6之后就已经支持 es6 了</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 只编译 src 目录下的文件</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"src\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lib\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ts-node\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"esm\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"编写源码并导出\"><a href=\"#编写源码并导出\" class=\"headerlink\" title=\"编写源码并导出\"></a>编写源码并导出</h3><p>在 <strong>src</strong> 目录下编写 <strong>ts</strong> 代码，并在 <strong>src/index.ts</strong> 中进行导出</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// src/index.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n  a<span class=\"token punctuation\">,</span>\n  fn\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"使用-tsc-命令测试构建\"><a href=\"#使用-tsc-命令测试构建\" class=\"headerlink\" title=\"使用 tsc 命令测试构建\"></a>使用 tsc 命令测试构建</h3><p>生成 js 文件和 .d.ts 文件，如下图</p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204031544801.png\" alt=\"image-20220403154415749\"></p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204031543795.png\" alt=\"image-20220403154348555\"></p>\n<h2 id=\"使用-ESlint-Prettier\"><a href=\"#使用-ESlint-Prettier\" class=\"headerlink\" title=\"使用 ESlint + Prettier\"></a>使用 ESlint + Prettier</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> eslint prettier -D<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h3><h4 id=\"eslint\"><a href=\"#eslint\" class=\"headerlink\" title=\"eslint\"></a>eslint</h4><p>可以使用 <code>npx eslint --init</code>命令行的方式自动安装规则集、插件和生成配置文件</p>\n<p>这里我选择直接手动安装</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> @typescript-eslint/eslint-plugin @typescript-eslint/parser <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>新建 <strong>.eslintrc</strong> 配置文件</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"@typescript-eslint\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"root\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"prettier\"><a href=\"#prettier\" class=\"headerlink\" title=\"prettier\"></a>prettier</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D eslint-config-prettier eslint-plugin-prettier<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加 <strong>.pretteric.js</strong> 文件</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// .pretteric.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">printWidth</span><span class=\"token operator\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">semi</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">singleQuote</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">trailingComma</span><span class=\"token operator\">:</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">arrowParens</span><span class=\"token operator\">:</span> <span class=\"token string\">'avoid'</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改 <strong>.eslintrc</strong> 文件</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// .eslintrc</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:prettier/recommended\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"@typescript-eslint\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"ecmaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"root\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p>上面配置完毕，可以看到就生效了</p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204031628219.png\" alt=\"image-20220403162853148\"></p>\n<h2 id=\"使用-Rolluip-打包\"><a href=\"#使用-Rolluip-打包\" class=\"headerlink\" title=\"使用 Rolluip 打包\"></a>使用 Rolluip 打包</h2><p>这个项目的模块化采用了 <strong>ESM</strong> 规范，并且是 <strong>TS</strong> 编写的，需要进行打包，这里我采用了 <strong>Rollup</strong> 作为构建工具。</p>\n<h3 id=\"Rollup-使用流程\"><a href=\"#Rollup-使用流程\" class=\"headerlink\" title=\"Rollup 使用流程\"></a>Rollup 使用流程</h3><h4 id=\"浏览器环境\"><a href=\"#浏览器环境\" class=\"headerlink\" title=\"浏览器环境\"></a>浏览器环境</h4><ul>\n<li><p>若无需考虑浏览器兼容性</p>\n<ol>\n<li>书写 esm 代码 </li>\n<li>rollip 通过项目<strong>入口</strong>，<strong>递归识别</strong> esm 模块 </li>\n<li>最终打包成一个或多个 <strong>bundle.js</strong> </li>\n<li> 浏览器直接可以支持引入 <code>&lt;script type=&quot;module&quot;&gt;&lt;/srcipt&gt;</code></li>\n</ol>\n</li>\n<li><p>若考虑浏览器兼容性</p>\n<p>相对而言就会比较复杂，需要用额外的 <strong>polyfill</strong> 库，或者<strong>结合 Webpack 使用</strong></p>\n</li>\n</ul>\n<h4 id=\"npm-包\"><a href=\"#npm-包\" class=\"headerlink\" title=\"npm 包\"></a>npm 包</h4><ol>\n<li>书写 esm 代码 （也可以使用 cjs，需要插件<code>@rollup/plugin-commonjs</code>）</li>\n<li> rollip 通过项目<strong>入口</strong></li>\n<li><strong>递归识别</strong> esm 模块 </li>\n<li>可支持配置输出多种格式的模块，如 <strong>esm、cjs、umd、amd</strong> </li>\n<li> 最终打包成一个或多个 <strong>bundle.js</strong></li>\n</ol>\n<h3 id=\"Rollup-的优点和使用场景\"><a href=\"#Rollup-的优点和使用场景\" class=\"headerlink\" title=\"Rollup 的优点和使用场景\"></a>Rollup 的优点和使用场景</h3><ul>\n<li>轻量级、配置简单、容易上手</li>\n<li>支持 Tree Shaking</li>\n</ul>\n<p>这些特点决定了 Rollup 适合用来<strong>构建一些 JS 库</strong>（如 Vue、React等等），或<strong>高版本无需向下兼容的程序</strong>。与 Webpack 的臃肿相比，Rollup 打包后的代码普遍<strong>体积更小</strong>，也<strong>更容易看懂</strong>（Webpack 为了实现 Tree Shaking 会注入很多自定义的代码）</p>\n<p>我们想要发布的 npm 包<strong>只在 Node 环境下使用</strong>，就适合使用 <strong>Rollup</strong> 对代码进行处理，甚至都不需要用到 <strong>Babel 进行 ES 语法的向下兼容</strong>。下面就正式开始吧！</p>\n<h3 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> rollup -D<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><p>安装必要的处理插件</p>\n<ul>\n<li><code>@rollup/plugin-node-resolve</code>: 查找和打包node_modules中的第三方模块</li>\n<li><code>@rollup/plugin-commonjs</code>: 将 CommonJS 转换成 ES2015 模块供 Rollup 处理</li>\n<li><code>@rollup/plugin-typescript</code>: 解析TypeScript</li>\n<li><code>rollup-plugin-delete</code>: 打包前删除之前的 bundle</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> @rollup/plugin-node-resolve @rollup/plugin-commonjs @rollup/plugin-typescript @rollup-plugin-babel rollup-plugin-delete -D<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>新建 <strong>rollup.config.js</strong> 文件</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token comment\">// rollup.config.js</span>\n<span class=\"token keyword\">import</span> nodeResolve <span class=\"token keyword\">from</span> <span class=\"token string\">'@rollup/plugin-node-resolve'</span> \n<span class=\"token keyword\">import</span> commonjs <span class=\"token keyword\">from</span> <span class=\"token string\">'@rollup/plugin-commonjs'</span>\n<span class=\"token keyword\">import</span> typescript <span class=\"token keyword\">from</span> <span class=\"token string\">'@rollup/plugin-typescript'</span> \n<span class=\"token keyword\">import</span> del <span class=\"token keyword\">from</span> <span class=\"token string\">'rollup-plugin-delete'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">input</span><span class=\"token operator\">:</span> <span class=\"token string\">'src/index.ts'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">file</span><span class=\"token operator\">:</span> <span class=\"token string\">'lib/index.cjs.js'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">format</span><span class=\"token operator\">:</span> <span class=\"token string\">'cjs'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">entryFileNames</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].cjs.js'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">targets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'lib/**/*'</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">nodeResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n      <span class=\"token function\">commonjs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n      <span class=\"token function\">typescript</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">tsconfig</span><span class=\"token operator\">:</span> <span class=\"token string\">'./tsconfig.json'</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">external</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 外部引用的库，不要打包，用于处理 peerDependencies</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">input</span><span class=\"token operator\">:</span> <span class=\"token string\">'src/index.ts'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">file</span><span class=\"token operator\">:</span> <span class=\"token string\">'lib/index.esm.js'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">format</span><span class=\"token operator\">:</span> <span class=\"token string\">'esm'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">entryFileNames</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].esm.js'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token function\">nodeResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n      <span class=\"token function\">commonjs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n      <span class=\"token function\">typescript</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">tsconfig</span><span class=\"token operator\">:</span> <span class=\"token string\">'./tsconfig.json'</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">external</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"打包命令\"><a href=\"#打包命令\" class=\"headerlink\" title=\"打包命令\"></a>打包命令</h3><p>往 <strong>package.json</strong> 文件中新增 <strong>scripts</strong> 打包命令</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n\t...\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rollup -c\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n  ...\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"发布-npm-包\"><a href=\"#发布-npm-包\" class=\"headerlink\" title=\"发布 npm 包\"></a>发布 npm 包</h2><h3 id=\"自动化-NPM-Scripts\"><a href=\"#自动化-NPM-Scripts\" class=\"headerlink\" title=\"自动化 NPM Scripts\"></a>自动化 NPM Scripts</h3><p>npm 包在发布的时候会触发一些钩子，可以在这些阶段做一些自动化的处理</p>\n<ul>\n<li><code>prepublish</code>：在<code>npm publish</code>命令之前运行（也会在不带参数的<code>npm install</code>命令前运行，详情在下段描述）</li>\n<li><code>prepare</code>: 在两种情况前运行，一是<code>npm publish</code>命令前，二是不带参数的<code>npm install</code>命令；它会在<code>prepublish</code>之后、<code>prepublishOnly</code>之前执行</li>\n<li><code>prepublishOnly</code>: 在<code>npm publish</code>命令前执行</li>\n<li><code>publish,postpublish</code>： 在<code>npm publish</code>命令后执行</li>\n<li><code>preinstall</code>: 在<code>npm install</code>命令前执行</li>\n<li><code>install,postinstall</code>： 在<code>npm install</code>命令后执行</li>\n<li><code>preuninstall，uninstall</code>: 在<code>npm uninstall</code>命令前执行</li>\n<li><code>postuninstall</code> ： 在<code>npm uninstall</code>命令后执行</li>\n<li><code>preversion</code>：在改变包的version前执行</li>\n<li><code>version</code>： 在改变包的version后，但提交之前执行</li>\n<li><code>postversion</code>： 在提交version变更后执行</li>\n<li><code>pretest， test， posttest</code>： 伴随<code>npm test</code>命令</li>\n<li><code>prestop， stop， poststop</code>： 伴随<code>npm stop</code>命令</li>\n<li><code>restart, start, poststart</code>: 伴随 <code>npm start</code>命令</li>\n<li><code>pre restart， restart， poststart</code>： 伴随 <code>npm restart</code>命令。提示：假如scripts里没有写restart命令，npm默认会运行start、stop</li>\n<li><code>preshrinkwrap, shrinkwrap, postshrinkwrap</code>: 伴随 <code>npm shrinkwrap</code> 命令（用于固定依赖包版本）</li>\n</ul>\n<p>下面是这次使用到的一些配置，主要也就是代码的 lint 校验 和 自动 build</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rollup -c\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --write \\\"src/**/*.ts\\\" \\\"src/**/*.js\\\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint . --ext .ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"prepublishOnly\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run lint &amp;&amp; npm run build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"preversion\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run lint\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"注册账户\"><a href=\"#注册账户\" class=\"headerlink\" title=\"注册账户\"></a>注册账户</h3><p>前往 <a href=\"www.npmjs.com\">npm 官网 </a> 创建一个 npm 账号</p>\n<h3 id=\"正式发布\"><a href=\"#正式发布\" class=\"headerlink\" title=\"正式发布\"></a>正式发布</h3><p>一般来说，我们会将构建好的 npm 包直接托管在 npm 的<strong>公有 registry</strong> 上， 这样每个人都可以自由地安装使用。有时候，可能只是一些内部公共业务的抽离，显然不能让所有人都有权限下载，这时候就需要考虑<strong>私有化部署一个 registry</strong>，再将 npm 发布到内网，实现不同项目的代码库共享。</p>\n<h4 id=\"公有\"><a href=\"#公有\" class=\"headerlink\" title=\"公有\"></a>公有</h4><p>命令行使用 <code>npm login</code> 登录 npm 账号</p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204111605552.png\" alt=\"image-20220411160521420\"></p>\n<p>使用 <code>npm publish</code> 进行发布</p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204141305396.png\" alt=\"image-20220414122936262\"></p>\n<h4 id=\"私有\"><a href=\"#私有\" class=\"headerlink\" title=\"私有\"></a>私有</h4><ol>\n<li>部署 verdaccio</li>\n</ol>\n<p><a href=\"https://github.com/verdaccio/verdaccio\">verdaccio</a> 是一个私有仓库搭建工具，搭配镜像源管理工具 <a href=\"https://link.juejin.cn/?target=https://github.com/Pana/nrm\">nrm</a> 使用，可以方便地切换不同的 npm 源使用。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -g verdaccio nrm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>安装完毕可以直接运行 verdaccio 开启私有 npm 服务，也可以对 verdaccio 进行一些启动配置（<code>/users/用户名/.config/verdaccio/config.yaml</code>）</p>\n<p>使用 pm2 守护进程去启动 verdaccio，避免断开连接后服务关闭</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g pm2\npm2 start verdaccio <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>启动后，我们打开浏览器<a href=\"http://0.0.0.0:4873/\">http://127.0.0.1:4873</a>，就可以看到了</p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204111548828.png\" alt=\"image-20220411154852639\"></p>\n<ol start=\"2\">\n<li>发布 npm 包</li>\n</ol>\n<p>在发布前，要先确保我们当前的 npm 源不是公有源</p>\n<p>使用 <code>nrm add local http://localhost:4873</code>  添加一个本地源 ，使用 <code>nrm ls</code>命令查看</p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204111554309.png\" alt=\"image-20220411155421167\"></p>\n<p>使用 <code>nrm use local</code> 使用我们的本地源</p>\n<p>![image-20220414130924403](/Users/starryeve/Library/Application Support/typora-user-images/image-20220414130924403.png)</p>\n<p>剩下的操作就跟使用公有源是一样的了，这里不再重复。</p>\n<h2 id=\"遇到的问题和处理\"><a href=\"#遇到的问题和处理\" class=\"headerlink\" title=\"遇到的问题和处理\"></a>遇到的问题和处理</h2><h3 id=\"1-console-对象在-ts-文件中不存在\"><a href=\"#1-console-对象在-ts-文件中不存在\" class=\"headerlink\" title=\"1. console 对象在 ts 文件中不存在\"></a>1. console 对象在 ts 文件中不存在</h3><pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token string\">'console'</span> is not defined<span class=\"token punctuation\">.</span><span class=\"token function\">eslint</span><span class=\"token punctuation\">(</span>no<span class=\"token operator\">-</span>undef<span class=\"token punctuation\">)</span>\n✖ <span class=\"token number\">1</span> <span class=\"token function\">problem</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> error<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> warnings<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>JavaScript 有很多种运行环境，常见的浏览器和 NodeJS，除此之外还有很多软件系统使用 JavaScript 作为脚本引擎，比如 RN、PostgreSQL等。而这些运行环境可能并不存在<code>console</code>这个对象。另外在浏览器环境下会有<code>window</code>对象，而 Node 下没有；在 Node 下会有<code>process</code>对象，而浏览器环境下没有。</p>\n<p>所以在配置文件应该指明程序的目标环境：</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// .eslintrc</span>\n<span class=\"token punctuation\">&#123;</span>\n  ......\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n ......\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>保存后重新执行检查，就不会有任何报错信息了。\u0011</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://morning.work/page/maintainable-nodejs/getting-started-with-eslint.html\">https://morning.work/page/maintainable-nodejs/getting-started-with-eslint.html</a></p></blockquote>\n<h3 id=\"2-顶层-awiat-的使用\"><a href=\"#2-顶层-awiat-的使用\" class=\"headerlink\" title=\"2. 顶层 awiat 的使用\"></a>2. 顶层 awiat 的使用</h3><p>根据语法规范，<code>await</code> 只能出现在 <code>async</code>函数内部，否则会报错。如果我们就想在一个 NodeJS 模块里面使用顶层 <code>await</code>，有如下几种办法：</p>\n<ol>\n<li><p>IIFE</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>NodeJS v14.8 后可用</p>\n<p><a href=\"https://link.juejin.cn/?target=https://nodejs.org/en/blog/release/v14.8.0/\">Node.js v14.8</a> 版本中允许直接使用顶层 await，替代了之前使用 –harmony-top-level-await 标识的方案。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token variable\">$node</span> --harmony-top-level-await app.js<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>但这只能在 <strong>ESM</strong> 中使用，也即是说要保证每个 js 文件都是 ESM 模块</p>\n</li>\n</ol>\n<p>上面是针对 js 文件的做法，如果是 ts 的话，则要：….</p>\n<h3 id=\"3-npm-构建的五种依赖\"><a href=\"#3-npm-构建的五种依赖\" class=\"headerlink\" title=\"3. npm 构建的五种依赖\"></a>3. npm 构建的五种依赖</h3><p><code>dependencies</code></p>\n<p>指定了项目运行所需要的依赖</p>\n<p><code>devDependcies</code></p>\n<p>指定了项目开发所需要的依赖</p>\n<p><code>peerDependencies</code></p>\n<p>当开发一个模块的时候，如果<strong>当前模块A</strong>与<strong>所依赖的模块B</strong>同时依赖一个<strong>第三方模块C</strong></p>\n<p>有几种情况需要讨论：</p>\n<ol>\n<li><p>A 和 B 所依赖的 C 模块版本相同</p>\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">graph</span> LR<span class=\"token punctuation\">;</span>\n\tA<span class=\"token arrow operator\">--></span>B<span class=\"token punctuation\">;</span>\n\tA<span class=\"token arrow operator\">--></span>C<span class=\"token punctuation\">;</span>\n\tB<span class=\"token arrow operator\">--></span>C<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这种情况下将只安装一份模块C，对应的 <strong>node_mudules</strong>目录结构为：</p>\n<pre class=\"line-numbers language-tree\" data-language=\"tree\"><code class=\"language-tree\">.\n├── A.js\n├── node_modules\n│   ├── C\n│   │   ├—— C.js\n│   │   └── package.json\n│   ├── B\n│   │   ├—— B.js\n│   │   └── package.json\n├── package.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>A 和 B 所依赖的 C 模块版本不相同</p>\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\"><span class=\"token keyword\">graph</span> LR<span class=\"token punctuation\">;</span>\n\tA<span class=\"token arrow operator\">--></span>B<span class=\"token punctuation\">;</span>\n\tA<span class=\"token arrow operator\">--></span>C1<span class=\"token punctuation\">;</span>\n\tB<span class=\"token arrow operator\">--></span>C2<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这种情况下将会安装两份模块C，对应的 <strong>node_mudules</strong>目录结构为</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── A.js\n├── node_modules\n│   ├── B\n│   │   ├── B.js\n│   │   ├── node_modules\n│   │   │   └── C2\n│   │   │       ├── C2.js\n│   │   │       └── package.json\n│   │   └── package.json\n│   └── C1\n│       ├── C1.js\n│       └── package.json\n└── package.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>大多数情况下，这也没什么问题，C模块的两个版本可以共存。但是，当 B 与 C 的依赖关系暴露给用户时，就可能会出现问题。</p>\n<p>典型的场景是<strong>插件</strong>，比如我们的项目 A 中用到了 <strong>Vue2.x</strong> （C1），我们还安装了 <strong>element-plus</strong>（B）。但我们知道，<strong>element-plus</strong> 本身是基于 <strong>Vue3.x</strong>（C2） 构建的。这时，用户要是将 2.x 版本的 Vue 实例传给 element-plus，就可能会出现问题。</p>\n<p>因此，需要一种机制，在依赖安装的时候，如果 B 和 C 一起安装，那么 C 必须是 3.x版本。</p>\n<p><code>peerDependencies</code>字段，就是用来供插件（element-plus）指定其所需要的依赖的版本。可以通过<code>peerDependencies</code>字段来限制，使用 element-plus 必须依赖 vue3.x</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"peerDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"vue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.2.0\"</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<p><code>bundledDependencies</code></p>\n<p>指定发布的时候会被一起打包的模块</p>\n<p><code>optionalDependencies</code></p>\n<p>如果一个依赖模块可以被使用， 同时你也希望在该模块找不到或无法获取时<code>npm</code>继续运行，你可以把这个模块依赖放到<code>optionalDependencies</code>配置中。这个配置的写法和<code>dependencies</code>的写法一样，不同的是这里边写的模块安装失败不会导致<code>npm install</code>失败。</p>\n<p>Semver 版本规范</p>\n<p>它们的值都是一个对象，对象中的每个成员，分别由模块名和对应的版本要求组成，表示依赖的模块及其版本范围</p>\n<p>版本号遵循 semver 规范（主版本号.次版本号.修订号）</p>\n<ul>\n<li>固定版本：如1.2.0，安装时只安装指定的版本</li>\n<li>波浪号<del>：如</del>1.2.0，安装次版本号的最新修订版本，即1.2.x</li>\n<li>插入号^：如^1.2.0，安装主版本号的最新次版本、修订版本，即1.x.x</li>\n</ul>\n<h3 id=\"4-url-parse-已废弃\"><a href=\"#4-url-parse-已废弃\" class=\"headerlink\" title=\"4. url.parse() 已废弃\"></a>4. url.parse() 已废弃</h3><p>项目中用到了 <code>https</code> 模块发送 <code>post</code> 请求到指定的 webhook url，原生 node 提供了 <code>http.request</code>，需要传入解析过后的参数：</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">https<span class=\"token punctuation\">.</span>request（<span class=\"token punctuation\">&#123;</span>\n     <span class=\"token literal-property property\">hostname</span><span class=\"token operator\">:</span> <span class=\"token string\">'example.org'</span> <span class=\"token punctuation\">,</span>\n     <span class=\"token literal-property property\">protocol</span><span class=\"token operator\">:</span> <span class=\"token string\">'https'</span><span class=\"token punctuation\">,</span>\n     <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/foo/'</span><span class=\"token punctuation\">,</span>\n     <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token string\">'443'</span><span class=\"token punctuation\">,</span>\n     <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>\n     <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\n     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>于是就使用到了 <code>url</code> 模块的 <code>parse</code> 方法进行处理，会出现提示说已经被废弃：</p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204051039522.png\" alt=\"image-20220405103912283\"></p>\n<p> <code>url.parse()</code> 方法使用一种宽松的非标准算法来解析 url 字符串，可能会引入安全问题，已经确定的有主机名欺骗以及用户名和密码处理不当的问题。</p>\n<p>官方推荐使用 <code>URL</code> 内置类进行 url 解析，它提供了一组符合 <strong>WHATWG 规范</strong> 的 API。</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.org:8080/foo/?id=1&amp;name=who'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">URL <span class=\"token punctuation\">&#123;</span>\n  href: <span class=\"token string\">'https://example.org:8080/foo/?id=1&amp;name=who'</span>,\n  origin: <span class=\"token string\">'https://example.org:8080'</span>,\n  protocol: <span class=\"token string\">'https:'</span>,\n  username: <span class=\"token string\">''</span>,\n  password: <span class=\"token string\">''</span>,\n  host: <span class=\"token string\">'example.org:8080'</span>,\n  hostname: <span class=\"token string\">'example.org'</span>,\n  port: <span class=\"token string\">'8080'</span>,\n  pathname: <span class=\"token string\">'/foo/'</span>,\n  search: <span class=\"token string\">'?id=1&amp;name=who'</span>,\n  searchParams: URLSearchParams <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'1'</span>, <span class=\"token string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'who'</span> <span class=\"token punctuation\">&#125;</span>,\n  hash: <span class=\"token string\">''</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://nodejs.org/api/url.html#class-url\">https://nodejs.org/api/url.html#class-url</a></p></blockquote>\n<h3 id=\"5-生产环境下缺少-ts-lib-报错\"><a href=\"#5-生产环境下缺少-ts-lib-报错\" class=\"headerlink\" title=\"5. 生产环境下缺少 ts-lib 报错\"></a>5. 生产环境下缺少 ts-lib 报错</h3><p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204051352370.png\" alt=\"image-20220405135230232\"></p>\n<p>其实这跟上面提到的 <code>peerDependencies</code> 也有关系，我们在安装依赖 <code>@rollup/plugin-typescipt</code> 的时候，命令行有提示过我们：</p>\n<p><img src=\"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202204051355407.png\" alt=\"image-20220405135556290\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>rollup 官方插件仓库也有提示：  <a href=\"https://github.com/rollup/plugins/tree/master/packages/typescript\">Note that both <code>typescript</code> and <code>tslib</code> are peer dependencies of this plugin that need to be installed separately.</a></p></blockquote>\n<h4 id=\"6-和-的区别\"><a href=\"#6-和-的区别\" class=\"headerlink\" title=\"6. ?? 和 || 的区别\"></a>6. ?? 和 || 的区别</h4><p><code>a ?? b</code></p>\n<p><code>a || b</code></p>\n<p>相同点：用法相同，都是前后为值，中间用运算符连接。根据前面的值判断最终值</p>\n<p>不同点：使用  <code>??</code>时，当 a 为 <code>null</code> 或 <code>undefined</code>时，才会返回 b；使用 <code>||</code>时，a 会先进行隐式类型转换，变成 <code>Boolean</code>后进行判断，若为 <code>true</code>，则返回a，否则返回b</p>\n<p>总体来说，空值合并运算符更适合在<strong>不知道变量是否有值</strong>的时候使用</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>关于 Rollup ，其实还是比较好上手的，它配置起来足够轻量足够简洁。但这里只是简单地处理了一下 typescript，并生成两种不同模块的入口文件。如果在浏览器中使用，还需要考虑非 js 文件的识别、静态文件处理、ES语法降级、sourcemap、代码压缩、热更新等等。大多数我们能想到的功能， Rollup 都有对应的 plugin 去做处理，并且将它们收录到了官方的插件库中，使用的时候非常方便。</p>\n<p>最后，关于这篇文章用到的代码，还有这个库本身，我都把它们放到 github 上了，感兴趣的话可以<a href=\"https://github.com/starryeve/webhook-chatbot\">点这里</a>，如果有哪些不对欢迎指正，如果有其他的机器人想要集成，欢迎 PR，感谢。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://segmentfault.com/a/1190000008832423\">https://segmentfault.com/a/1190000008832423</a></p>\n<p><a href=\"https://www.ruanyifeng.com/blog/2016/10/npm_scripts.html\">https://www.ruanyifeng.com/blog/2016/10/npm_scripts.html</a></p>\n<p><a href=\"https://docs.npmjs.com/cli/v8/using-npm/scripts\">https://docs.npmjs.com/cli/v8/using-npm/scripts</a></p></blockquote>\n","feature":true,"text":"使用 Rollup 构建并发布一个 Typescipt NPM包前言最近使用 Github Actions 做 CICD 的时候，用到了企业微信提供的 Github 机器人，其提供了一套基于 Webhook 机制的消息推送功能，可以在构建打包或PR发起的时候将相关信息转发到群聊中...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-Rollup-%E6%9E%84%E5%BB%BA%E5%B9%B6%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AA-Typescipt-NPM%E5%8C%85\"><span class=\"toc-text\">使用 Rollup 构建并发布一个 Typescipt NPM包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9C%80%E8%A6%81%E7%94%A8%E5%88%B0%E7%9A%84%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">需要用到的工具</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">项目初始化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-Typescript\"><span class=\"toc-text\">使用 Typescript</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E6%BA%90%E7%A0%81%E5%B9%B6%E5%AF%BC%E5%87%BA\"><span class=\"toc-text\">编写源码并导出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-tsc-%E5%91%BD%E4%BB%A4%E6%B5%8B%E8%AF%95%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">使用 tsc 命令测试构建</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-ESlint-Prettier\"><span class=\"toc-text\">使用 ESlint + Prettier</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-1\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE-1\"><span class=\"toc-text\">配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#eslint\"><span class=\"toc-text\">eslint</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#prettier\"><span class=\"toc-text\">prettier</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">效果</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-Rolluip-%E6%89%93%E5%8C%85\"><span class=\"toc-text\">使用 Rolluip 打包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Rollup-%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">Rollup 使用流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">浏览器环境</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#npm-%E5%8C%85\"><span class=\"toc-text\">npm 包</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Rollup-%E7%9A%84%E4%BC%98%E7%82%B9%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">Rollup 的优点和使用场景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-2\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">基本配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8C%85%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">打包命令</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%91%E5%B8%83-npm-%E5%8C%85\"><span class=\"toc-text\">发布 npm 包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E5%8C%96-NPM-Scripts\"><span class=\"toc-text\">自动化 NPM Scripts</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E5%86%8C%E8%B4%A6%E6%88%B7\"><span class=\"toc-text\">注册账户</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83\"><span class=\"toc-text\">正式发布</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%AC%E6%9C%89\"><span class=\"toc-text\">公有</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A7%81%E6%9C%89\"><span class=\"toc-text\">私有</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E5%A4%84%E7%90%86\"><span class=\"toc-text\">遇到的问题和处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-console-%E5%AF%B9%E8%B1%A1%E5%9C%A8-ts-%E6%96%87%E4%BB%B6%E4%B8%AD%E4%B8%8D%E5%AD%98%E5%9C%A8\"><span class=\"toc-text\">1. console 对象在 ts 文件中不存在</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E9%A1%B6%E5%B1%82-awiat-%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2. 顶层 awiat 的使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-npm-%E6%9E%84%E5%BB%BA%E7%9A%84%E4%BA%94%E7%A7%8D%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">3. npm 构建的五种依赖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-url-parse-%E5%B7%B2%E5%BA%9F%E5%BC%83\"><span class=\"toc-text\">4. url.parse() 已废弃</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%BC%BA%E5%B0%91-ts-lib-%E6%8A%A5%E9%94%99\"><span class=\"toc-text\">5. 生产环境下缺少 ts-lib 报错</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E5%92%8C-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">6. ?? 和 || 的区别</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol></li></ol>","author":{"name":"EVE","slug":"blog-author","avatar":"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202201171207395.png","link":"/","description":"keep calm, own minds </br>  put thoughts forward","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"JavaScript 中堆的实现","uid":"24ef29a6bf818a7a3e9faebfef05e8bd","slug":"JavaScript 中堆的实现","date":"2022-03-03T02:54:26.000Z","updated":"2022-04-14T05:57:12.845Z","comments":true,"path":"api/articles/JavaScript 中堆的实现.json","keywords":null,"cover":[],"text":"JavaScript 中堆的实现堆满足以下两个性质的数据结构就是堆： 堆是一个完全二叉树 堆上的任意节点值都必须大于等于（大顶堆）或小于等于（小顶堆）其左右子节点值 也就是说，堆的根节点是堆中最大或最小的元素： 堆的构建堆本身是一棵完全二叉树，所以可以使用数组进行描述。给定一个节...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"EVE","slug":"blog-author","avatar":"https://raw.githubusercontent.com/starryeve/figure-bed/master/images/202201171207395.png","link":"/","description":"keep calm, own minds </br>  put thoughts forward","socials":{"github":"https://github.com/starryeve","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/562570281888488","customs":{}}},"feature":true}}